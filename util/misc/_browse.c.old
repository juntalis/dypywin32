/* Generated by Cython 0.17.beta1 on Mon Jul 30 02:06:12 2012 */

#define PY_SSIZE_T_CLEAN
#include <stdio.h>
#include <stdlib.h>
#include <stddef.h> /* For offsetof */
#include <math.h>
#include <string.h>
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */
#include "Python.h"

#include "structmember.h"

#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
#ifndef Py_PYTHON_H
	#error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02040000
	#error Cython requires Python 2.4+.
#else


/* BROWSE.PY START */
#ifndef offsetof
#define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif

#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
	#define __stdcall
  #endif
  #ifndef __cdecl
	#define __cdecl
  #endif
  #ifndef __fastcall
	#define __fastcall
  #endif
#endif

#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif

#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif

#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif

#ifdef PYPY_VERSION
#define CYTHON_COMPILING_IN_PYPY 1
#define CYTHON_COMPILING_IN_CPYTHON 0
#else
#define CYTHON_COMPILING_IN_PYPY 0
#define CYTHON_COMPILING_IN_CPYTHON 1
#endif

#if PY_VERSION_HEX < 0x02050000
  typedef int Py_ssize_t;
  #define PY_SSIZE_T_MAX INT_MAX
  #define PY_SSIZE_T_MIN INT_MIN
  #define PY_FORMAT_SIZE_T ""
  #define PyInt_FromSsize_t(z) PyInt_FromLong(z)
  #define PyInt_AsSsize_t(o)   __Pyx_PyInt_AsInt(o)
  #define PyNumber_Index(o)    ((PyNumber_Check(o) && !PyFloat_Check(o)) ? PyNumber_Int(o) : \
								(PyErr_Format(PyExc_TypeError, \
											  "expected index value, got %.200s", Py_TYPE(o)->tp_name), \
								 (PyObject*)0))
  #define PyIndex_Check(o)     (PyNumber_Check(o) && !PyFloat_Check(o) && !PyComplex_Check(o))
  #define PyErr_WarnEx(category, message, stacklevel) PyErr_Warn(category, message)
  #define __PYX_BUILD_PY_SSIZE_T "i"
#else
  #define __PYX_BUILD_PY_SSIZE_T "n"
#endif

#if PY_VERSION_HEX < 0x02060000
  #define Py_REFCNT(ob) (((PyObject*)(ob))->ob_refcnt)
  #define Py_TYPE(ob)   (((PyObject*)(ob))->ob_type)
  #define Py_SIZE(ob)   (((PyVarObject*)(ob))->ob_size)
  #define PyVarObject_HEAD_INIT(type, size) \
		  PyObject_HEAD_INIT(type) size,
  #define PyType_Modified(t)

  typedef struct {
	 void *buf;
	 PyObject *obj;
	 Py_ssize_t len;
	 Py_ssize_t itemsize;
	 int readonly;
	 int ndim;
	 char *format;
	 Py_ssize_t *shape;
	 Py_ssize_t *strides;
	 Py_ssize_t *suboffsets;
	 void *internal;
  } Py_buffer;

  #define PyBUF_SIMPLE 0
  #define PyBUF_WRITABLE 0x0001
  #define PyBUF_FORMAT 0x0004
  #define PyBUF_ND 0x0008
  #define PyBUF_STRIDES (0x0010 | PyBUF_ND)
  #define PyBUF_C_CONTIGUOUS (0x0020 | PyBUF_STRIDES)
  #define PyBUF_F_CONTIGUOUS (0x0040 | PyBUF_STRIDES)
  #define PyBUF_ANY_CONTIGUOUS (0x0080 | PyBUF_STRIDES)
  #define PyBUF_INDIRECT (0x0100 | PyBUF_STRIDES)
  #define PyBUF_RECORDS (PyBUF_STRIDES | PyBUF_FORMAT | PyBUF_WRITABLE)
  #define PyBUF_FULL (PyBUF_INDIRECT | PyBUF_FORMAT | PyBUF_WRITABLE)

  typedef int (*getbufferproc)(PyObject *, Py_buffer *, int);
  typedef void (*releasebufferproc)(PyObject *, Py_buffer *);
#endif

#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos) \
		  PyCode_New(a, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos) \
		  PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif

#if PY_MAJOR_VERSION < 3 && PY_MINOR_VERSION < 6
  #define PyUnicode_FromString(s) PyUnicode_Decode(s, strlen(s), "UTF-8", "strict")
#endif

#if PY_MAJOR_VERSION >= 3
  #define Py_TPFLAGS_CHECKTYPES 0
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif

#if (PY_VERSION_HEX < 0x02060000) || (PY_MAJOR_VERSION >= 3)
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif


#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ? \
											  0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
#else
  #define CYTHON_PEP393_ENABLED 0
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))

  #define __Pyx_PyUnicode_READ(k, d, i)   ((k=k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
#endif

#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif

#if PY_VERSION_HEX < 0x02060000
  #define PyBytesObject                PyStringObject
  #define PyBytes_Type                 PyString_Type
  #define PyBytes_Check                PyString_Check
  #define PyBytes_CheckExact           PyString_CheckExact
  #define PyBytes_FromString           PyString_FromString
  #define PyBytes_FromStringAndSize    PyString_FromStringAndSize
  #define PyBytes_FromFormat           PyString_FromFormat
  #define PyBytes_DecodeEscape         PyString_DecodeEscape
  #define PyBytes_AsString             PyString_AsString
  #define PyBytes_AsStringAndSize      PyString_AsStringAndSize
  #define PyBytes_Size                 PyString_Size
  #define PyBytes_AS_STRING            PyString_AS_STRING
  #define PyBytes_GET_SIZE             PyString_GET_SIZE
  #define PyBytes_Repr                 PyString_Repr
  #define PyBytes_Concat               PyString_Concat
  #define PyBytes_ConcatAndDel         PyString_ConcatAndDel
#endif

#if PY_VERSION_HEX < 0x02060000
  #define PySet_Check(obj)             PyObject_TypeCheck(obj, &PySet_Type)
  #define PyFrozenSet_Check(obj)       PyObject_TypeCheck(obj, &PyFrozenSet_Type)
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif

#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)

#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
#endif

#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif

#if PY_VERSION_HEX < 0x03020000
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif

#if (PY_MAJOR_VERSION < 3) || (PY_VERSION_HEX >= 0x03010300)
  #define __Pyx_PySequence_GetSlice(obj, a, b) PySequence_GetSlice(obj, a, b)
  #define __Pyx_PySequence_SetSlice(obj, a, b, value) PySequence_SetSlice(obj, a, b, value)
  #define __Pyx_PySequence_DelSlice(obj, a, b) PySequence_DelSlice(obj, a, b)
#else
  #define __Pyx_PySequence_GetSlice(obj, a, b) (unlikely(!(obj)) ? \
		(PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), (PyObject*)0) : \
		(likely((obj)->ob_type->tp_as_mapping) ? (PySequence_GetSlice(obj, a, b)) : \
			(PyErr_Format(PyExc_TypeError, "'%.200s' object is unsliceable", (obj)->ob_type->tp_name), (PyObject*)0)))
  #define __Pyx_PySequence_SetSlice(obj, a, b, value) (unlikely(!(obj)) ? \
		(PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), -1) : \
		(likely((obj)->ob_type->tp_as_mapping) ? (PySequence_SetSlice(obj, a, b, value)) : \
			(PyErr_Format(PyExc_TypeError, "'%.200s' object doesn't support slice assignment", (obj)->ob_type->tp_name), -1)))
  #define __Pyx_PySequence_DelSlice(obj, a, b) (unlikely(!(obj)) ? \
		(PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), -1) : \
		(likely((obj)->ob_type->tp_as_mapping) ? (PySequence_DelSlice(obj, a, b)) : \
			(PyErr_Format(PyExc_TypeError, "'%.200s' object doesn't support slice deletion", (obj)->ob_type->tp_name), -1)))
#endif

#if PY_MAJOR_VERSION >= 3
  #define PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#endif

#if PY_VERSION_HEX < 0x02050000
  #define __Pyx_GetAttrString(o,n)   PyObject_GetAttrString((o),((char *)(n)))
  #define __Pyx_SetAttrString(o,n,a) PyObject_SetAttrString((o),((char *)(n)),(a))
  #define __Pyx_DelAttrString(o,n)   PyObject_DelAttrString((o),((char *)(n)))
#else
  #define __Pyx_GetAttrString(o,n)   PyObject_GetAttrString((o),(n))
  #define __Pyx_SetAttrString(o,n,a) PyObject_SetAttrString((o),(n),(a))
  #define __Pyx_DelAttrString(o,n)   PyObject_DelAttrString((o),(n))
#endif

#if PY_VERSION_HEX < 0x02050000
  #define __Pyx_NAMESTR(n) ((char *)(n))
  #define __Pyx_DOCSTR(n)  ((char *)(n))
#else
  #define __Pyx_NAMESTR(n) (n)
  #define __Pyx_DOCSTR(n)  (n)
#endif

#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
	#define __PYX_EXTERN_C extern "C"
  #else
	#define __PYX_EXTERN_C extern
  #endif
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
#define _USE_MATH_DEFINES
#endif

#define __PYX_HAVE___browse
#define __PYX_HAVE_API___browse


#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif


/* inline attribute */
#ifndef CYTHON_INLINE
  #if defined(__GNUC__)
	#define CYTHON_INLINE __inline__
  #elif defined(_MSC_VER)
	#define CYTHON_INLINE __inline
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
	#define CYTHON_INLINE inline
  #else
	#define CYTHON_INLINE
  #endif
#endif

/* unused attribute */
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif

typedef struct {PyObject **p; char *s; const long n; const char* encoding; const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry; /*proto*/


/* Type Conversion Predeclarations */

#define __Pyx_PyBytes_FromUString(s) PyBytes_FromString((char*)s)
#define __Pyx_PyBytes_AsUString(s)   ((unsigned char*) PyBytes_AsString(s))

#define __Pyx_Owned_Py_None(b) (Py_INCREF(Py_None), Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? (Py_INCREF(Py_True), Py_True) : (Py_INCREF(Py_False), Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x);

static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
static CYTHON_INLINE size_t __Pyx_PyInt_AsSize_t(PyObject*);

#if CYTHON_COMPILING_IN_CPYTHON
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))

#ifdef __GNUC__
  /* Test for GCC > 2.95 */
  #if __GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95))
	#define likely(x)   __builtin_expect(!!(x), 1)
	#define unlikely(x) __builtin_expect(!!(x), 0)
  #else /* __GNUC__ > 2 ... */
	#define likely(x)   (x)
	#define unlikely(x) (x)
  #endif /* __GNUC__ > 2 ... */
#else /* __GNUC__ */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
	
static PyObject *__pyx_m;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "_browse.pyx",
};

/*--- Type declarations ---*/
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
	void (*INCREF)(void*, PyObject*, int);
	void (*DECREF)(void*, PyObject*, int);
	void (*GOTREF)(void*, PyObject*, int);
	void (*GIVEREF)(void*, PyObject*, int);
	void* (*SetupContext)(const char*, int, const char*);
	void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname); /*proto*/
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil) \
		  if (acquire_gil) { \
			  PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure(); \
			  __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__); \
			  PyGILState_Release(__pyx_gilstate_save); \
		  } else { \
			  __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__); \
		  }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil) \
		  __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext() \
		  __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif /* CYTHON_REFNANNY */
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

static PyObject *__Pyx_GetName(PyObject *dict, PyObject *name); /*proto*/

static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
	Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found); /*proto*/

static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name); /*proto*/

static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[], \
	PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args, \
	const char* function_name); /*proto*/

static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

static CYTHON_INLINE int __Pyx_IterFinish(void); /*proto*/

static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected); /*proto*/

static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
	PyObject *r;
	if (!j) return NULL;
	r = PyObject_GetItem(o, j);
	Py_DECREF(j);
	return r;
}
#define __Pyx_GetItemInt_List(o, i, size, to_py_func) (((size) <= sizeof(Py_ssize_t)) ? \
													__Pyx_GetItemInt_List_Fast(o, i) : \
													__Pyx_GetItemInt_Generic(o, to_py_func(i)))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i) {
#if CYTHON_COMPILING_IN_CPYTHON
	if (likely((0 <= i) & (i < PyList_GET_SIZE(o)))) {
		PyObject *r = PyList_GET_ITEM(o, i);
		Py_INCREF(r);
		return r;
	}
	else if ((-PyList_GET_SIZE(o) <= i) & (i < 0)) {
		PyObject *r = PyList_GET_ITEM(o, PyList_GET_SIZE(o) + i);
		Py_INCREF(r);
		return r;
	}
	return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
	return PySequence_GetItem(o, i);
#endif
}
#define __Pyx_GetItemInt_Tuple(o, i, size, to_py_func) (((size) <= sizeof(Py_ssize_t)) ? \
													__Pyx_GetItemInt_Tuple_Fast(o, i) : \
													__Pyx_GetItemInt_Generic(o, to_py_func(i)))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i) {
#if CYTHON_COMPILING_IN_CPYTHON
	if (likely((0 <= i) & (i < PyTuple_GET_SIZE(o)))) {
		PyObject *r = PyTuple_GET_ITEM(o, i);
		Py_INCREF(r);
		return r;
	}
	else if ((-PyTuple_GET_SIZE(o) <= i) & (i < 0)) {
		PyObject *r = PyTuple_GET_ITEM(o, PyTuple_GET_SIZE(o) + i);
		Py_INCREF(r);
		return r;
	}
	return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
	return PySequence_GetItem(o, i);
#endif
}
#define __Pyx_GetItemInt(o, i, size, to_py_func) (((size) <= sizeof(Py_ssize_t)) ? \
													__Pyx_GetItemInt_Fast(o, i) : \
													__Pyx_GetItemInt_Generic(o, to_py_func(i)))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i) {
#if CYTHON_COMPILING_IN_CPYTHON
	if (PyList_CheckExact(o)) {
		Py_ssize_t n = (likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
		if (likely((n >= 0) & (n < PyList_GET_SIZE(o)))) {
			PyObject *r = PyList_GET_ITEM(o, n);
			Py_INCREF(r);
			return r;
		}
	}
	else if (PyTuple_CheckExact(o)) {
		Py_ssize_t n = (likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
		if (likely((n >= 0) & (n < PyTuple_GET_SIZE(o)))) {
			PyObject *r = PyTuple_GET_ITEM(o, n);
			Py_INCREF(r);
			return r;
		}
	} else {  /* inlined PySequence_GetItem() */
		PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
		if (likely(m && m->sq_item)) {
			if (unlikely(i < 0) && likely(m->sq_length)) {
				Py_ssize_t l = m->sq_length(o);
				if (unlikely(l < 0)) return NULL;
				i += l;
			}
			return m->sq_item(o, i);
		}
	}
#else
	if (PySequence_Check(o)) {
		return PySequence_GetItem(o, i);
	}
#endif
	return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb); /*proto*/
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb); /*proto*/

static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb); /*proto*/

static CYTHON_INLINE void __Pyx_ExceptionSave(PyObject **type, PyObject **value, PyObject **tb); /*proto*/
static void __Pyx_ExceptionReset(PyObject *type, PyObject *value, PyObject *tb); /*proto*/

static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, long level); /*proto*/

static CYTHON_INLINE void __Pyx_RaiseImportError(PyObject *name);

static PyObject *__Pyx_FindPy2Metaclass(PyObject *bases); /*proto*/

static PyObject *__Pyx_CreateClass(PyObject *bases, PyObject *dict, PyObject *name,
								   PyObject *modname); /*proto*/

#define __Pyx_CyFunction_USED 1

#define __Pyx_CYFUNCTION_STATICMETHOD  0x01
#define __Pyx_CYFUNCTION_CLASSMETHOD   0x02
#define __Pyx_CYFUNCTION_CCLASS        0x04
#define __Pyx_CyFunction_GetClosure(f) \
	(((__pyx_CyFunctionObject *) (f))->func_closure)
#define __Pyx_CyFunction_GetClassObj(f) \
	(((__pyx_CyFunctionObject *) (f))->func_classobj)
#define __Pyx_CyFunction_Defaults(type, f) \
	((type *)(((__pyx_CyFunctionObject *) (f))->defaults))
#define __Pyx_CyFunction_SetDefaultsGetter(f, g) \
	((__pyx_CyFunctionObject *) (f))->defaults_getter = (g)
typedef struct {
	PyCFunctionObject func;
	int flags;
	PyObject *func_dict;
	PyObject *func_weakreflist;
	PyObject *func_name;
	PyObject *func_doc;
	PyObject *func_code;
	PyObject *func_closure;
	PyObject *func_classobj; /* No-args super() class cell */
	void *defaults;
	int defaults_pyobjects;
	PyObject *defaults_tuple; /* Const defaults tuple */
	PyObject *(*defaults_getter)(PyObject *);
} __pyx_CyFunctionObject;
static PyTypeObject *__pyx_CyFunctionType = 0;
#define __Pyx_CyFunction_NewEx(ml, flags, self, module, code) \
	__Pyx_CyFunction_New(__pyx_CyFunctionType, ml, flags, self, module, code)
static PyObject *__Pyx_CyFunction_New(PyTypeObject *,
									  PyMethodDef *ml, int flags,
									  PyObject *self, PyObject *module,
									  PyObject* code);
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *m,
														 size_t size,
														 int pyobjects);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *m,
															PyObject *tuple);
static int __Pyx_CyFunction_init(void);



static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals); /*proto*/

static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals); /*proto*/

#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyString_Equals __Pyx_PyUnicode_Equals
#else
#define __Pyx_PyString_Equals __Pyx_PyBytes_Equals
#endif

static int __Pyx_Print(PyObject*, PyObject *, int); /*proto*/
#if CYTHON_COMPILING_IN_PYPY || PY_MAJOR_VERSION >= 3
static PyObject* __pyx_print = 0;
static PyObject* __pyx_print_kwargs = 0;
#endif

static int __Pyx_PrintOne(PyObject* stream, PyObject *o); /*proto*/

static CYTHON_INLINE unsigned char __Pyx_PyInt_AsUnsignedChar(PyObject *);

static CYTHON_INLINE unsigned short __Pyx_PyInt_AsUnsignedShort(PyObject *);

static CYTHON_INLINE unsigned int __Pyx_PyInt_AsUnsignedInt(PyObject *);

static CYTHON_INLINE char __Pyx_PyInt_AsChar(PyObject *);

static CYTHON_INLINE short __Pyx_PyInt_AsShort(PyObject *);

static CYTHON_INLINE int __Pyx_PyInt_AsInt(PyObject *);

static CYTHON_INLINE signed char __Pyx_PyInt_AsSignedChar(PyObject *);

static CYTHON_INLINE signed short __Pyx_PyInt_AsSignedShort(PyObject *);

static CYTHON_INLINE signed int __Pyx_PyInt_AsSignedInt(PyObject *);

static CYTHON_INLINE int __Pyx_PyInt_AsLongDouble(PyObject *);

static CYTHON_INLINE unsigned long __Pyx_PyInt_AsUnsignedLong(PyObject *);

static CYTHON_INLINE unsigned PY_LONG_LONG __Pyx_PyInt_AsUnsignedLongLong(PyObject *);

static CYTHON_INLINE long __Pyx_PyInt_AsLong(PyObject *);

static CYTHON_INLINE PY_LONG_LONG __Pyx_PyInt_AsLongLong(PyObject *);

static CYTHON_INLINE signed long __Pyx_PyInt_AsSignedLong(PyObject *);

static CYTHON_INLINE signed PY_LONG_LONG __Pyx_PyInt_AsSignedLongLong(PyObject *);

static void __Pyx_WriteUnraisable(const char *name, int clineno,
								  int lineno, const char *filename); /*proto*/

static int __Pyx_check_binary_version(void);

typedef struct {
	int code_line;
	PyCodeObject* code_object;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
	int count;
	int max_count;
	__Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

static void __Pyx_AddTraceback(const char *funcname, int c_line,
							   int py_line, const char *filename); /*proto*/

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t); /*proto*/


/* Module declarations from '_browse' */
static char *__pyx_v_7_browse_locationStr;
static char *__pyx_v_7_browse_cmdStr;
__PYX_EXTERN_C DL_EXPORT(int) browseBuild(char *, char *, int __pyx_skip_dispatch); /*proto*/
#define __Pyx_MODULE_NAME "_browse"
int __pyx_module_is_main__browse = 0;

/* Implementation of '_browse' */
static PyObject *__pyx_builtin_StopIteration;
static PyObject *__pyx_builtin_sorted;
static PyObject *__pyx_builtin_KeyboardInterrupt;
static PyObject *__pyx_pf_7_browse_match_strip(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_line, PyObject *__pyx_v_prefix); /* proto */
static PyObject *__pyx_pf_7_browse_2parse(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_text); /* proto */
static PyObject *__pyx_pf_7_browse_4generate_html(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_node); /* proto */
static PyObject *__pyx_pf_7_browse_6ninja_dump(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_target); /* proto */
static PyObject *__pyx_pf_7_browse_14RequestHandler_do_GET(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7_browse_14RequestHandler_2log_message(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_format, CYTHON_UNUSED PyObject *__pyx_v_args); /* proto */
static PyObject *__pyx_pf_7_browse_8browseBuild(CYTHON_UNUSED PyObject *__pyx_self, char *__pyx_v_cmd, char *__pyx_v_location); /* proto */
static char __pyx_k_1[] = "\n";
static char __pyx_k_3[] = "  input: ";
static char __pyx_k_4[] = "    ";
static char __pyx_k_5[] = "| ";
static char __pyx_k_6[] = "|| ";
static char __pyx_k_7[] = "order-only";
static char __pyx_k_8[] = "  outputs:";
static char __pyx_k_9[] = "<!DOCTYPE html>\n<style>\nbody {\n    font-family: sans;\n    font-size: 0.8em;\n    margin: 4ex;\n}\nh1 {\n    font-weight: normal;\n    font-size: 140%;\n    text-align: center;\n    margin: 0;\n}\nh2 {\n    font-weight: normal;\n    font-size: 120%;\n}\ntt {\n    font-family: WebKitHack, monospace;\n    white-space: nowrap;\n}\n.filelist {\n  -webkit-columns: auto 2;\n}\n</style>";
static char __pyx_k_10[] = "<h1><tt>%s</tt></h1>";
static char __pyx_k_11[] = "<h2>target is built using rule <tt>%s</tt> of</h2>";
static char __pyx_k_12[] = "<div class=filelist>";
static char __pyx_k_13[] = "";
static char __pyx_k_14[] = " (%s)";
static char __pyx_k_15[] = "<tt><a href=\"?%s\">%s</a>%s</tt><br>";
static char __pyx_k_16[] = "</div>";
static char __pyx_k_17[] = "<h2>dependent edges build:</h2>";
static char __pyx_k_18[] = "<tt><a href=\"?%s\">%s</a></tt><br>";
static char __pyx_k_19[] = "-t";
static char __pyx_k_20[] = "/";
static char __pyx_k_22[] = "?";
static char __pyx_k_26[] = "Web server running on port %d, ctl-C to abort...";
static char __pyx_k_27[] = "http://localhost:%s";
static char __pyx_k_28[] = "Simple web server for browsing dependency graph data.\n\nThis script is cythonized, compiled, and linked into the final executable. It\nis initialized, imported, and browseBuild is called when the browse\ncommand is issued.\n";
static char __pyx_k_31[] = "C:\\Development\\cpp.workspace\\dynload_python\\src\\_browse.pyx";
static char __pyx_k_42[] = "BaseHTTPRequestHandler";
static char __pyx_k___[] = "_";
static char __pyx_k__cmd[] = "cmd";
static char __pyx_k__sys[] = "sys";
static char __pyx_k__Node[] = "Node";
static char __pyx_k__PIPE[] = "PIPE";
static char __pyx_k__args[] = "args";
static char __pyx_k__argv[] = "argv";
static char __pyx_k__line[] = "line";
static char __pyx_k__next[] = "next";
static char __pyx_k__node[] = "node";
static char __pyx_k__path[] = "path";
static char __pyx_k__proc[] = "proc";
static char __pyx_k__rule[] = "rule";
static char __pyx_k__self[] = "self";
static char __pyx_k__text[] = "text";
static char __pyx_k__type[] = "type";
static char __pyx_k__Popen[] = "Popen";
static char __pyx_k__extra[] = "extra";
static char __pyx_k__input[] = "input";
static char __pyx_k__lines[] = "lines";
static char __pyx_k__match[] = "match";
static char __pyx_k__parse[] = "parse";
static char __pyx_k__query[] = "query";
static char __pyx_k__split[] = "split";
static char __pyx_k__strip[] = "strip";
static char __pyx_k__wfile[] = "wfile";
static char __pyx_k__do_GET[] = "do_GET";
static char __pyx_k__format[] = "format";
static char __pyx_k__inputs[] = "inputs";
static char __pyx_k__output[] = "output";
static char __pyx_k__prefix[] = "prefix";
static char __pyx_k__sorted[] = "sorted";
static char __pyx_k__stdout[] = "stdout";
static char __pyx_k__target[] = "target";
static char __pyx_k___browse[] = "_browse";
static char __pyx_k__outputs[] = "outputs";
static char __pyx_k__Location[] = "Location";
static char __pyx_k____main__[] = "__main__";
static char __pyx_k____name__[] = "__name__";
static char __pyx_k____test__[] = "__test__";
static char __pyx_k__implicit[] = "implicit";
static char __pyx_k__location[] = "location";
static char __pyx_k__open_new[] = "open_new";
static char __pyx_k__HTTPServer[] = "HTTPServer";
static char __pyx_k__namedtuple[] = "namedtuple";
static char __pyx_k__ninja_dump[] = "ninja_dump";
static char __pyx_k__startswith[] = "startswith";
static char __pyx_k__subprocess[] = "subprocess";
static char __pyx_k__webbrowser[] = "webbrowser";
static char __pyx_k__collections[] = "collections";
static char __pyx_k__communicate[] = "communicate";
static char __pyx_k__end_headers[] = "end_headers";
static char __pyx_k__log_message[] = "log_message";
static char __pyx_k__match_strip[] = "match_strip";
static char __pyx_k__send_header[] = "send_header";
static char __pyx_k__StopIteration[] = "StopIteration";
static char __pyx_k__generate_html[] = "generate_html";
static char __pyx_k__send_response[] = "send_response";
static char __pyx_k__serve_forever[] = "serve_forever";
static char __pyx_k__BaseHTTPServer[] = "BaseHTTPServer";
static char __pyx_k__RequestHandler[] = "RequestHandler";
static char __pyx_k__KeyboardInterrupt[] = "KeyboardInterrupt";
static PyObject *__pyx_kp_s_1;
static PyObject *__pyx_kp_s_10;
static PyObject *__pyx_kp_s_11;
static PyObject *__pyx_kp_s_12;
static PyObject *__pyx_kp_s_13;
static PyObject *__pyx_kp_s_14;
static PyObject *__pyx_kp_s_15;
static PyObject *__pyx_kp_s_16;
static PyObject *__pyx_kp_s_17;
static PyObject *__pyx_kp_s_18;
static PyObject *__pyx_kp_s_19;
static PyObject *__pyx_kp_s_20;
static PyObject *__pyx_kp_s_22;
static PyObject *__pyx_kp_s_26;
static PyObject *__pyx_kp_s_27;
static PyObject *__pyx_kp_s_3;
static PyObject *__pyx_kp_s_31;
static PyObject *__pyx_kp_s_4;
static PyObject *__pyx_n_s_42;
static PyObject *__pyx_kp_s_5;
static PyObject *__pyx_kp_s_6;
static PyObject *__pyx_kp_s_7;
static PyObject *__pyx_kp_s_8;
static PyObject *__pyx_kp_s_9;
static PyObject *__pyx_n_s__BaseHTTPServer;
static PyObject *__pyx_n_s__HTTPServer;
static PyObject *__pyx_n_s__KeyboardInterrupt;
static PyObject *__pyx_n_s__Location;
static PyObject *__pyx_n_s__Node;
static PyObject *__pyx_n_s__PIPE;
static PyObject *__pyx_n_s__Popen;
static PyObject *__pyx_n_s__RequestHandler;
static PyObject *__pyx_n_s__StopIteration;
static PyObject *__pyx_n_s___;
static PyObject *__pyx_n_s____main__;
static PyObject *__pyx_n_s____name__;
static PyObject *__pyx_n_s____test__;
static PyObject *__pyx_n_s___browse;
static PyObject *__pyx_n_s__args;
static PyObject *__pyx_n_s__argv;
static PyObject *__pyx_n_s__cmd;
static PyObject *__pyx_n_s__collections;
static PyObject *__pyx_n_s__communicate;
static PyObject *__pyx_n_s__do_GET;
static PyObject *__pyx_n_s__end_headers;
static PyObject *__pyx_n_s__extra;
static PyObject *__pyx_n_s__format;
static PyObject *__pyx_n_s__generate_html;
static PyObject *__pyx_n_s__implicit;
static PyObject *__pyx_n_s__input;
static PyObject *__pyx_n_s__inputs;
static PyObject *__pyx_n_s__line;
static PyObject *__pyx_n_s__lines;
static PyObject *__pyx_n_s__location;
static PyObject *__pyx_n_s__log_message;
static PyObject *__pyx_n_s__match;
static PyObject *__pyx_n_s__match_strip;
static PyObject *__pyx_n_s__namedtuple;
static PyObject *__pyx_n_s__next;
static PyObject *__pyx_n_s__ninja_dump;
static PyObject *__pyx_n_s__node;
static PyObject *__pyx_n_s__open_new;
static PyObject *__pyx_n_s__output;
static PyObject *__pyx_n_s__outputs;
static PyObject *__pyx_n_s__parse;
static PyObject *__pyx_n_s__path;
static PyObject *__pyx_n_s__prefix;
static PyObject *__pyx_n_s__proc;
static PyObject *__pyx_n_s__query;
static PyObject *__pyx_n_s__rule;
static PyObject *__pyx_n_s__self;
static PyObject *__pyx_n_s__send_header;
static PyObject *__pyx_n_s__send_response;
static PyObject *__pyx_n_s__serve_forever;
static PyObject *__pyx_n_s__sorted;
static PyObject *__pyx_n_s__split;
static PyObject *__pyx_n_s__startswith;
static PyObject *__pyx_n_s__stdout;
static PyObject *__pyx_n_s__strip;
static PyObject *__pyx_n_s__subprocess;
static PyObject *__pyx_n_s__sys;
static PyObject *__pyx_n_s__target;
static PyObject *__pyx_n_s__text;
static PyObject *__pyx_n_s__type;
static PyObject *__pyx_n_s__webbrowser;
static PyObject *__pyx_n_s__wfile;
static PyObject *__pyx_int_200;
static PyObject *__pyx_int_302;
static PyObject *__pyx_int_404;
static PyObject *__pyx_k_tuple_2;
static PyObject *__pyx_k_tuple_21;
static PyObject *__pyx_k_tuple_23;
static PyObject *__pyx_k_tuple_24;
static PyObject *__pyx_k_tuple_25;
static PyObject *__pyx_k_tuple_29;
static PyObject *__pyx_k_tuple_32;
static PyObject *__pyx_k_tuple_34;
static PyObject *__pyx_k_tuple_36;
static PyObject *__pyx_k_tuple_38;
static PyObject *__pyx_k_tuple_40;
static PyObject *__pyx_k_codeobj_30;
static PyObject *__pyx_k_codeobj_33;
static PyObject *__pyx_k_codeobj_35;
static PyObject *__pyx_k_codeobj_37;
static PyObject *__pyx_k_codeobj_39;
static PyObject *__pyx_k_codeobj_41;

/* Python wrapper */
static PyObject *__pyx_pw_7_browse_1match_strip(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_7_browse_1match_strip = {__Pyx_NAMESTR("match_strip"), (PyCFunction)__pyx_pw_7_browse_1match_strip, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)};
static PyObject *__pyx_pw_7_browse_1match_strip(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_line = 0;
  PyObject *__pyx_v_prefix = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("match_strip (wrapper)", 0);
  {
	static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__line,&__pyx_n_s__prefix,0};
	PyObject* values[2] = {0,0};
	if (unlikely(__pyx_kwds)) {
	  Py_ssize_t kw_args;
	  const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
	  switch (pos_args) {
		case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
		case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
		case  0: break;
		default: goto __pyx_L5_argtuple_error;
	  }
	  kw_args = PyDict_Size(__pyx_kwds);
	  switch (pos_args) {
		case  0:
		if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__line)) != 0)) kw_args--;
		else goto __pyx_L5_argtuple_error;
		case  1:
		if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__prefix)) != 0)) kw_args--;
		else {
		  __Pyx_RaiseArgtupleInvalid("match_strip", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 47; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
		}
	  }
	  if (unlikely(kw_args > 0)) {
		if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "match_strip") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 47; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
	  }
	} else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
	  goto __pyx_L5_argtuple_error;
	} else {
	  values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
	  values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
	}
	__pyx_v_line = values[0];
	__pyx_v_prefix = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("match_strip", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 47; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_browse.match_strip", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7_browse_match_strip(__pyx_self, __pyx_v_line, __pyx_v_prefix);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_browse.pyx":47
 * # of an edge.  But I think it's less confusing than alternatives.
 * 
 * def match_strip(line, prefix):             # <<<<<<<<<<<<<<
 *     if not line.startswith(prefix):
 *         return (False, line)
 */

static PyObject *__pyx_pf_7_browse_match_strip(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_line, PyObject *__pyx_v_prefix) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("match_strip", 0);

  /* "_browse.pyx":48
 * 
 * def match_strip(line, prefix):
 *     if not line.startswith(prefix):             # <<<<<<<<<<<<<<
 *         return (False, line)
 *     return (True, line[len(prefix):])
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_line, __pyx_n_s__startswith); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_prefix);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_prefix);
  __Pyx_GIVEREF(__pyx_v_prefix);
  __pyx_t_3 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = (!__pyx_t_4);
  if (__pyx_t_5) {

	/* "_browse.pyx":49
 * def match_strip(line, prefix):
 *     if not line.startswith(prefix):
 *         return (False, line)             # <<<<<<<<<<<<<<
 *     return (True, line[len(prefix):])
 * 
 */
	__Pyx_XDECREF(__pyx_r);
	__pyx_t_3 = __Pyx_PyBool_FromLong(0); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
	__Pyx_GOTREF(__pyx_t_3);
	__pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
	__Pyx_GOTREF(__pyx_t_2);
	PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
	__Pyx_GIVEREF(__pyx_t_3);
	__Pyx_INCREF(__pyx_v_line);
	PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_line);
	__Pyx_GIVEREF(__pyx_v_line);
	__pyx_t_3 = 0;
	__pyx_r = ((PyObject *)__pyx_t_2);
	__pyx_t_2 = 0;
	goto __pyx_L0;
	goto __pyx_L3;
  }
  __pyx_L3:;

  /* "_browse.pyx":50
 *     if not line.startswith(prefix):
 *         return (False, line)
 *     return (True, line[len(prefix):])             # <<<<<<<<<<<<<<
 * 
 * def parse(text):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyBool_FromLong(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = PyObject_Length(__pyx_v_prefix); if (unlikely(__pyx_t_6 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __Pyx_PySequence_GetSlice(__pyx_v_line, __pyx_t_6, PY_SSIZE_T_MAX); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_r = ((PyObject *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("_browse.match_strip", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7_browse_3parse(PyObject *__pyx_self, PyObject *__pyx_v_text); /*proto*/
static PyMethodDef __pyx_mdef_7_browse_3parse = {__Pyx_NAMESTR("parse"), (PyCFunction)__pyx_pw_7_browse_3parse, METH_O, __Pyx_DOCSTR(0)};
static PyObject *__pyx_pw_7_browse_3parse(PyObject *__pyx_self, PyObject *__pyx_v_text) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("parse (wrapper)", 0);
  __pyx_r = __pyx_pf_7_browse_2parse(__pyx_self, ((PyObject *)__pyx_v_text));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_browse.pyx":52
 *     return (True, line[len(prefix):])
 * 
 * def parse(text):             # <<<<<<<<<<<<<<
 *     lines = iter(text.split('\n'))
 * 
 */

static PyObject *__pyx_pf_7_browse_2parse(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_text) {
  PyObject *__pyx_v_lines = NULL;
  PyObject *__pyx_v_target = NULL;
  PyObject *__pyx_v_rule = NULL;
  PyObject *__pyx_v_inputs = NULL;
  PyObject *__pyx_v_outputs = NULL;
  PyObject *__pyx_v_line = NULL;
  PyObject *__pyx_v_match = NULL;
  PyObject *__pyx_v_type = NULL;
  CYTHON_UNUSED PyObject *__pyx_v__ = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *(*__pyx_t_8)(PyObject *);
  int __pyx_t_9;
  int __pyx_t_10;
  int __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("parse", 0);

  /* "_browse.pyx":53
 * 
 * def parse(text):
 *     lines = iter(text.split('\n'))             # <<<<<<<<<<<<<<
 * 
 *     target = None
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_text, __pyx_n_s__split); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 53; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_2), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 53; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 53; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_lines = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "_browse.pyx":55
 *     lines = iter(text.split('\n'))
 * 
 *     target = None             # <<<<<<<<<<<<<<
 *     rule = None
 *     inputs = []
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_target = Py_None;

  /* "_browse.pyx":56
 * 
 *     target = None
 *     rule = None             # <<<<<<<<<<<<<<
 *     inputs = []
 *     outputs = []
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_rule = Py_None;

  /* "_browse.pyx":57
 *     target = None
 *     rule = None
 *     inputs = []             # <<<<<<<<<<<<<<
 *     outputs = []
 * 
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 57; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_inputs = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "_browse.pyx":58
 *     rule = None
 *     inputs = []
 *     outputs = []             # <<<<<<<<<<<<<<
 * 
 *     try:
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 58; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_outputs = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "_browse.pyx":60
 *     outputs = []
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         target = lines.next()[:-1]  # strip trailing colon
 * 
 */
  {
	__Pyx_ExceptionSave(&__pyx_t_3, &__pyx_t_4, &__pyx_t_5);
	__Pyx_XGOTREF(__pyx_t_3);
	__Pyx_XGOTREF(__pyx_t_4);
	__Pyx_XGOTREF(__pyx_t_5);
	/*try:*/ {

	  /* "_browse.pyx":61
 * 
 *     try:
 *         target = lines.next()[:-1]  # strip trailing colon             # <<<<<<<<<<<<<<
 * 
 *         line = lines.next()
 */
	  __pyx_t_1 = PyObject_GetAttr(__pyx_v_lines, __pyx_n_s__next); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 61; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
	  __Pyx_GOTREF(__pyx_t_1);
	  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 61; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
	  __Pyx_GOTREF(__pyx_t_2);
	  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
	  __pyx_t_1 = __Pyx_PySequence_GetSlice(__pyx_t_2, 0, -1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 61; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
	  __Pyx_GOTREF(__pyx_t_1);
	  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
	  __Pyx_DECREF(__pyx_v_target);
	  __pyx_v_target = __pyx_t_1;
	  __pyx_t_1 = 0;

	  /* "_browse.pyx":63
 *         target = lines.next()[:-1]  # strip trailing colon
 * 
 *         line = lines.next()             # <<<<<<<<<<<<<<
 *         (match, rule) = match_strip(line, '  input: ')
 *         if match:
 */
	  __pyx_t_1 = PyObject_GetAttr(__pyx_v_lines, __pyx_n_s__next); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 63; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
	  __Pyx_GOTREF(__pyx_t_1);
	  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 63; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
	  __Pyx_GOTREF(__pyx_t_2);
	  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
	  __pyx_v_line = __pyx_t_2;
	  __pyx_t_2 = 0;

	  /* "_browse.pyx":64
 * 
 *         line = lines.next()
 *         (match, rule) = match_strip(line, '  input: ')             # <<<<<<<<<<<<<<
 *         if match:
 *             (match, line) = match_strip(lines.next(), '    ')
 */
	  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__match_strip); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
	  __Pyx_GOTREF(__pyx_t_2);
	  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
	  __Pyx_GOTREF(__pyx_t_1);
	  __Pyx_INCREF(__pyx_v_line);
	  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_line);
	  __Pyx_GIVEREF(__pyx_v_line);
	  __Pyx_INCREF(((PyObject *)__pyx_kp_s_3));
	  PyTuple_SET_ITEM(__pyx_t_1, 1, ((PyObject *)__pyx_kp_s_3));
	  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_3));
	  __pyx_t_6 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
	  __Pyx_GOTREF(__pyx_t_6);
	  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
	  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
	  if ((likely(PyTuple_CheckExact(__pyx_t_6))) || (PyList_CheckExact(__pyx_t_6))) {
		PyObject* sequence = __pyx_t_6;
		#if CYTHON_COMPILING_IN_CPYTHON
		Py_ssize_t size = Py_SIZE(sequence);
		#else
		Py_ssize_t size = PySequence_Size(sequence);
		#endif
		if (unlikely(size != 2)) {
		  if (size > 2) __Pyx_RaiseTooManyValuesError(2);
		  else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
		  {__pyx_filename = __pyx_f[0]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
		}
		#if CYTHON_COMPILING_IN_CPYTHON
		if (likely(PyTuple_CheckExact(sequence))) {
		  __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
		  __pyx_t_2 = PyTuple_GET_ITEM(sequence, 1); 
		} else {
		  __pyx_t_1 = PyList_GET_ITEM(sequence, 0); 
		  __pyx_t_2 = PyList_GET_ITEM(sequence, 1); 
		}
		__Pyx_INCREF(__pyx_t_1);
		__Pyx_INCREF(__pyx_t_2);
		#else
		__pyx_t_1 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
		__pyx_t_2 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
		#endif
		__Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
	  } else
	  {
		Py_ssize_t index = -1;
		__pyx_t_7 = PyObject_GetIter(__pyx_t_6); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
		__Pyx_GOTREF(__pyx_t_7);
		__Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
		__pyx_t_8 = Py_TYPE(__pyx_t_7)->tp_iternext;
		index = 0; __pyx_t_1 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_1)) goto __pyx_L11_unpacking_failed;
		__Pyx_GOTREF(__pyx_t_1);
		index = 1; __pyx_t_2 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_2)) goto __pyx_L11_unpacking_failed;
		__Pyx_GOTREF(__pyx_t_2);
		if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_7), 2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
		__pyx_t_8 = NULL;
		__Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
		goto __pyx_L12_unpacking_done;
		__pyx_L11_unpacking_failed:;
		__Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
		__pyx_t_8 = NULL;
		if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
		{__pyx_filename = __pyx_f[0]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
		__pyx_L12_unpacking_done:;
	  }
	  __pyx_v_match = __pyx_t_1;
	  __pyx_t_1 = 0;
	  __Pyx_DECREF(__pyx_v_rule);
	  __pyx_v_rule = __pyx_t_2;
	  __pyx_t_2 = 0;

	  /* "_browse.pyx":65
 *         line = lines.next()
 *         (match, rule) = match_strip(line, '  input: ')
 *         if match:             # <<<<<<<<<<<<<<
 *             (match, line) = match_strip(lines.next(), '    ')
 *             while match:
 */
	  __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_v_match); if (unlikely(__pyx_t_9 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
	  if (__pyx_t_9) {

		/* "_browse.pyx":66
 *         (match, rule) = match_strip(line, '  input: ')
 *         if match:
 *             (match, line) = match_strip(lines.next(), '    ')             # <<<<<<<<<<<<<<
 *             while match:
 *                 type = None
 */
		__pyx_t_6 = __Pyx_GetName(__pyx_m, __pyx_n_s__match_strip); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 66; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
		__Pyx_GOTREF(__pyx_t_6);
		__pyx_t_2 = PyObject_GetAttr(__pyx_v_lines, __pyx_n_s__next); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 66; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
		__Pyx_GOTREF(__pyx_t_2);
		__pyx_t_1 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 66; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
		__Pyx_GOTREF(__pyx_t_1);
		__Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
		__pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 66; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
		__Pyx_GOTREF(__pyx_t_2);
		PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
		__Pyx_GIVEREF(__pyx_t_1);
		__Pyx_INCREF(((PyObject *)__pyx_kp_s_4));
		PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_kp_s_4));
		__Pyx_GIVEREF(((PyObject *)__pyx_kp_s_4));
		__pyx_t_1 = 0;
		__pyx_t_1 = PyObject_Call(__pyx_t_6, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 66; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
		__Pyx_GOTREF(__pyx_t_1);
		__Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
		__Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
		if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
		  PyObject* sequence = __pyx_t_1;
		  #if CYTHON_COMPILING_IN_CPYTHON
		  Py_ssize_t size = Py_SIZE(sequence);
		  #else
		  Py_ssize_t size = PySequence_Size(sequence);
		  #endif
		  if (unlikely(size != 2)) {
			if (size > 2) __Pyx_RaiseTooManyValuesError(2);
			else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
			{__pyx_filename = __pyx_f[0]; __pyx_lineno = 66; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
		  }
		  #if CYTHON_COMPILING_IN_CPYTHON
		  if (likely(PyTuple_CheckExact(sequence))) {
			__pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
			__pyx_t_6 = PyTuple_GET_ITEM(sequence, 1); 
		  } else {
			__pyx_t_2 = PyList_GET_ITEM(sequence, 0); 
			__pyx_t_6 = PyList_GET_ITEM(sequence, 1); 
		  }
		  __Pyx_INCREF(__pyx_t_2);
		  __Pyx_INCREF(__pyx_t_6);
		  #else
		  __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 66; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
		  __pyx_t_6 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 66; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
		  #endif
		  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
		} else
		{
		  Py_ssize_t index = -1;
		  __pyx_t_7 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 66; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
		  __Pyx_GOTREF(__pyx_t_7);
		  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
		  __pyx_t_8 = Py_TYPE(__pyx_t_7)->tp_iternext;
		  index = 0; __pyx_t_2 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_2)) goto __pyx_L14_unpacking_failed;
		  __Pyx_GOTREF(__pyx_t_2);
		  index = 1; __pyx_t_6 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_6)) goto __pyx_L14_unpacking_failed;
		  __Pyx_GOTREF(__pyx_t_6);
		  if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_7), 2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 66; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
		  __pyx_t_8 = NULL;
		  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
		  goto __pyx_L15_unpacking_done;
		  __pyx_L14_unpacking_failed:;
		  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
		  __pyx_t_8 = NULL;
		  if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
		  {__pyx_filename = __pyx_f[0]; __pyx_lineno = 66; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
		  __pyx_L15_unpacking_done:;
		}
		__Pyx_DECREF(__pyx_v_match);
		__pyx_v_match = __pyx_t_2;
		__pyx_t_2 = 0;
		__Pyx_DECREF(__pyx_v_line);
		__pyx_v_line = __pyx_t_6;
		__pyx_t_6 = 0;

		/* "_browse.pyx":67
 *         if match:
 *             (match, line) = match_strip(lines.next(), '    ')
 *             while match:             # <<<<<<<<<<<<<<
 *                 type = None
 *                 (match, line) = match_strip(line, '| ')
 */
		while (1) {
		  __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_v_match); if (unlikely(__pyx_t_9 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 67; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
		  if (!__pyx_t_9) break;

		  /* "_browse.pyx":68
 *             (match, line) = match_strip(lines.next(), '    ')
 *             while match:
 *                 type = None             # <<<<<<<<<<<<<<
 *                 (match, line) = match_strip(line, '| ')
 *                 if match:
 */
		  __Pyx_INCREF(Py_None);
		  __Pyx_XDECREF(__pyx_v_type);
		  __pyx_v_type = Py_None;

		  /* "_browse.pyx":69
 *             while match:
 *                 type = None
 *                 (match, line) = match_strip(line, '| ')             # <<<<<<<<<<<<<<
 *                 if match:
 *                     type = 'implicit'
 */
		  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__match_strip); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 69; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
		  __Pyx_GOTREF(__pyx_t_1);
		  __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 69; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
		  __Pyx_GOTREF(__pyx_t_6);
		  __Pyx_INCREF(__pyx_v_line);
		  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_v_line);
		  __Pyx_GIVEREF(__pyx_v_line);
		  __Pyx_INCREF(((PyObject *)__pyx_kp_s_5));
		  PyTuple_SET_ITEM(__pyx_t_6, 1, ((PyObject *)__pyx_kp_s_5));
		  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_5));
		  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_6), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 69; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
		  __Pyx_GOTREF(__pyx_t_2);
		  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
		  __Pyx_DECREF(((PyObject *)__pyx_t_6)); __pyx_t_6 = 0;
		  if ((likely(PyTuple_CheckExact(__pyx_t_2))) || (PyList_CheckExact(__pyx_t_2))) {
			PyObject* sequence = __pyx_t_2;
			#if CYTHON_COMPILING_IN_CPYTHON
			Py_ssize_t size = Py_SIZE(sequence);
			#else
			Py_ssize_t size = PySequence_Size(sequence);
			#endif
			if (unlikely(size != 2)) {
			  if (size > 2) __Pyx_RaiseTooManyValuesError(2);
			  else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
			  {__pyx_filename = __pyx_f[0]; __pyx_lineno = 69; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
			}
			#if CYTHON_COMPILING_IN_CPYTHON
			if (likely(PyTuple_CheckExact(sequence))) {
			  __pyx_t_6 = PyTuple_GET_ITEM(sequence, 0); 
			  __pyx_t_1 = PyTuple_GET_ITEM(sequence, 1); 
			} else {
			  __pyx_t_6 = PyList_GET_ITEM(sequence, 0); 
			  __pyx_t_1 = PyList_GET_ITEM(sequence, 1); 
			}
			__Pyx_INCREF(__pyx_t_6);
			__Pyx_INCREF(__pyx_t_1);
			#else
			__pyx_t_6 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 69; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
			__pyx_t_1 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 69; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
			#endif
			__Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
		  } else
		  {
			Py_ssize_t index = -1;
			__pyx_t_7 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 69; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
			__Pyx_GOTREF(__pyx_t_7);
			__Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
			__pyx_t_8 = Py_TYPE(__pyx_t_7)->tp_iternext;
			index = 0; __pyx_t_6 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_6)) goto __pyx_L18_unpacking_failed;
			__Pyx_GOTREF(__pyx_t_6);
			index = 1; __pyx_t_1 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_1)) goto __pyx_L18_unpacking_failed;
			__Pyx_GOTREF(__pyx_t_1);
			if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_7), 2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 69; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
			__pyx_t_8 = NULL;
			__Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
			goto __pyx_L19_unpacking_done;
			__pyx_L18_unpacking_failed:;
			__Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
			__pyx_t_8 = NULL;
			if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
			{__pyx_filename = __pyx_f[0]; __pyx_lineno = 69; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
			__pyx_L19_unpacking_done:;
		  }
		  __Pyx_DECREF(__pyx_v_match);
		  __pyx_v_match = __pyx_t_6;
		  __pyx_t_6 = 0;
		  __Pyx_DECREF(__pyx_v_line);
		  __pyx_v_line = __pyx_t_1;
		  __pyx_t_1 = 0;

		  /* "_browse.pyx":70
 *                 type = None
 *                 (match, line) = match_strip(line, '| ')
 *                 if match:             # <<<<<<<<<<<<<<
 *                     type = 'implicit'
 *                 (match, line) = match_strip(line, '|| ')
 */
		  __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_v_match); if (unlikely(__pyx_t_9 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
		  if (__pyx_t_9) {

			/* "_browse.pyx":71
 *                 (match, line) = match_strip(line, '| ')
 *                 if match:
 *                     type = 'implicit'             # <<<<<<<<<<<<<<
 *                 (match, line) = match_strip(line, '|| ')
 *                 if match:
 */
			__Pyx_INCREF(((PyObject *)__pyx_n_s__implicit));
			__Pyx_DECREF(__pyx_v_type);
			__pyx_v_type = ((PyObject *)__pyx_n_s__implicit);
			goto __pyx_L20;
		  }
		  __pyx_L20:;

		  /* "_browse.pyx":72
 *                 if match:
 *                     type = 'implicit'
 *                 (match, line) = match_strip(line, '|| ')             # <<<<<<<<<<<<<<
 *                 if match:
 *                     type = 'order-only'
 */
		  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__match_strip); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 72; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
		  __Pyx_GOTREF(__pyx_t_2);
		  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 72; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
		  __Pyx_GOTREF(__pyx_t_1);
		  __Pyx_INCREF(__pyx_v_line);
		  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_line);
		  __Pyx_GIVEREF(__pyx_v_line);
		  __Pyx_INCREF(((PyObject *)__pyx_kp_s_6));
		  PyTuple_SET_ITEM(__pyx_t_1, 1, ((PyObject *)__pyx_kp_s_6));
		  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_6));
		  __pyx_t_6 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 72; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
		  __Pyx_GOTREF(__pyx_t_6);
		  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
		  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
		  if ((likely(PyTuple_CheckExact(__pyx_t_6))) || (PyList_CheckExact(__pyx_t_6))) {
			PyObject* sequence = __pyx_t_6;
			#if CYTHON_COMPILING_IN_CPYTHON
			Py_ssize_t size = Py_SIZE(sequence);
			#else
			Py_ssize_t size = PySequence_Size(sequence);
			#endif
			if (unlikely(size != 2)) {
			  if (size > 2) __Pyx_RaiseTooManyValuesError(2);
			  else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
			  {__pyx_filename = __pyx_f[0]; __pyx_lineno = 72; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
			}
			#if CYTHON_COMPILING_IN_CPYTHON
			if (likely(PyTuple_CheckExact(sequence))) {
			  __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
			  __pyx_t_2 = PyTuple_GET_ITEM(sequence, 1); 
			} else {
			  __pyx_t_1 = PyList_GET_ITEM(sequence, 0); 
			  __pyx_t_2 = PyList_GET_ITEM(sequence, 1); 
			}
			__Pyx_INCREF(__pyx_t_1);
			__Pyx_INCREF(__pyx_t_2);
			#else
			__pyx_t_1 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 72; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
			__pyx_t_2 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 72; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
			#endif
			__Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
		  } else
		  {
			Py_ssize_t index = -1;
			__pyx_t_7 = PyObject_GetIter(__pyx_t_6); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 72; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
			__Pyx_GOTREF(__pyx_t_7);
			__Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
			__pyx_t_8 = Py_TYPE(__pyx_t_7)->tp_iternext;
			index = 0; __pyx_t_1 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_1)) goto __pyx_L21_unpacking_failed;
			__Pyx_GOTREF(__pyx_t_1);
			index = 1; __pyx_t_2 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_2)) goto __pyx_L21_unpacking_failed;
			__Pyx_GOTREF(__pyx_t_2);
			if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_7), 2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 72; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
			__pyx_t_8 = NULL;
			__Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
			goto __pyx_L22_unpacking_done;
			__pyx_L21_unpacking_failed:;
			__Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
			__pyx_t_8 = NULL;
			if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
			{__pyx_filename = __pyx_f[0]; __pyx_lineno = 72; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
			__pyx_L22_unpacking_done:;
		  }
		  __Pyx_DECREF(__pyx_v_match);
		  __pyx_v_match = __pyx_t_1;
		  __pyx_t_1 = 0;
		  __Pyx_DECREF(__pyx_v_line);
		  __pyx_v_line = __pyx_t_2;
		  __pyx_t_2 = 0;

		  /* "_browse.pyx":73
 *                     type = 'implicit'
 *                 (match, line) = match_strip(line, '|| ')
 *                 if match:             # <<<<<<<<<<<<<<
 *                     type = 'order-only'
 *                 inputs.append((line, type))
 */
		  __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_v_match); if (unlikely(__pyx_t_9 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 73; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
		  if (__pyx_t_9) {

			/* "_browse.pyx":74
 *                 (match, line) = match_strip(line, '|| ')
 *                 if match:
 *                     type = 'order-only'             # <<<<<<<<<<<<<<
 *                 inputs.append((line, type))
 *                 (match, line) = match_strip(lines.next(), '    ')
 */
			__Pyx_INCREF(((PyObject *)__pyx_kp_s_7));
			__Pyx_DECREF(__pyx_v_type);
			__pyx_v_type = ((PyObject *)__pyx_kp_s_7);
			goto __pyx_L23;
		  }
		  __pyx_L23:;

		  /* "_browse.pyx":75
 *                 if match:
 *                     type = 'order-only'
 *                 inputs.append((line, type))             # <<<<<<<<<<<<<<
 *                 (match, line) = match_strip(lines.next(), '    ')
 * 
 */
		  __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 75; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
		  __Pyx_GOTREF(__pyx_t_6);
		  __Pyx_INCREF(__pyx_v_line);
		  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_v_line);
		  __Pyx_GIVEREF(__pyx_v_line);
		  __Pyx_INCREF(__pyx_v_type);
		  PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_v_type);
		  __Pyx_GIVEREF(__pyx_v_type);
		  __pyx_t_10 = PyList_Append(__pyx_v_inputs, ((PyObject *)__pyx_t_6)); if (unlikely(__pyx_t_10 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 75; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
		  __Pyx_DECREF(((PyObject *)__pyx_t_6)); __pyx_t_6 = 0;

		  /* "_browse.pyx":76
 *                     type = 'order-only'
 *                 inputs.append((line, type))
 *                 (match, line) = match_strip(lines.next(), '    ')             # <<<<<<<<<<<<<<
 * 
 *         match, _ = match_strip(line, '  outputs:')
 */
		  __pyx_t_6 = __Pyx_GetName(__pyx_m, __pyx_n_s__match_strip); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
		  __Pyx_GOTREF(__pyx_t_6);
		  __pyx_t_2 = PyObject_GetAttr(__pyx_v_lines, __pyx_n_s__next); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
		  __Pyx_GOTREF(__pyx_t_2);
		  __pyx_t_1 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
		  __Pyx_GOTREF(__pyx_t_1);
		  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
		  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
		  __Pyx_GOTREF(__pyx_t_2);
		  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
		  __Pyx_GIVEREF(__pyx_t_1);
		  __Pyx_INCREF(((PyObject *)__pyx_kp_s_4));
		  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_kp_s_4));
		  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_4));
		  __pyx_t_1 = 0;
		  __pyx_t_1 = PyObject_Call(__pyx_t_6, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
		  __Pyx_GOTREF(__pyx_t_1);
		  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
		  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
		  if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
			PyObject* sequence = __pyx_t_1;
			#if CYTHON_COMPILING_IN_CPYTHON
			Py_ssize_t size = Py_SIZE(sequence);
			#else
			Py_ssize_t size = PySequence_Size(sequence);
			#endif
			if (unlikely(size != 2)) {
			  if (size > 2) __Pyx_RaiseTooManyValuesError(2);
			  else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
			  {__pyx_filename = __pyx_f[0]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
			}
			#if CYTHON_COMPILING_IN_CPYTHON
			if (likely(PyTuple_CheckExact(sequence))) {
			  __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
			  __pyx_t_6 = PyTuple_GET_ITEM(sequence, 1); 
			} else {
			  __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 
			  __pyx_t_6 = PyList_GET_ITEM(sequence, 1); 
			}
			__Pyx_INCREF(__pyx_t_2);
			__Pyx_INCREF(__pyx_t_6);
			#else
			__pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
			__pyx_t_6 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
			#endif
			__Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
		  } else
		  {
			Py_ssize_t index = -1;
			__pyx_t_7 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
			__Pyx_GOTREF(__pyx_t_7);
			__Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
			__pyx_t_8 = Py_TYPE(__pyx_t_7)->tp_iternext;
			index = 0; __pyx_t_2 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_2)) goto __pyx_L24_unpacking_failed;
			__Pyx_GOTREF(__pyx_t_2);
			index = 1; __pyx_t_6 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_6)) goto __pyx_L24_unpacking_failed;
			__Pyx_GOTREF(__pyx_t_6);
			if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_7), 2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
			__pyx_t_8 = NULL;
			__Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
			goto __pyx_L25_unpacking_done;
			__pyx_L24_unpacking_failed:;
			__Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
			__pyx_t_8 = NULL;
			if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
			{__pyx_filename = __pyx_f[0]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
			__pyx_L25_unpacking_done:;
		  }
		  __Pyx_DECREF(__pyx_v_match);
		  __pyx_v_match = __pyx_t_2;
		  __pyx_t_2 = 0;
		  __Pyx_DECREF(__pyx_v_line);
		  __pyx_v_line = __pyx_t_6;
		  __pyx_t_6 = 0;
		}
		goto __pyx_L13;
	  }
	  __pyx_L13:;

	  /* "_browse.pyx":78
 *                 (match, line) = match_strip(lines.next(), '    ')
 * 
 *         match, _ = match_strip(line, '  outputs:')             # <<<<<<<<<<<<<<
 *         if match:
 *             (match, line) = match_strip(lines.next(), '    ')
 */
	  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__match_strip); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
	  __Pyx_GOTREF(__pyx_t_1);
	  __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
	  __Pyx_GOTREF(__pyx_t_6);
	  __Pyx_INCREF(__pyx_v_line);
	  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_v_line);
	  __Pyx_GIVEREF(__pyx_v_line);
	  __Pyx_INCREF(((PyObject *)__pyx_kp_s_8));
	  PyTuple_SET_ITEM(__pyx_t_6, 1, ((PyObject *)__pyx_kp_s_8));
	  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_8));
	  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_6), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
	  __Pyx_GOTREF(__pyx_t_2);
	  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
	  __Pyx_DECREF(((PyObject *)__pyx_t_6)); __pyx_t_6 = 0;
	  if ((likely(PyTuple_CheckExact(__pyx_t_2))) || (PyList_CheckExact(__pyx_t_2))) {
		PyObject* sequence = __pyx_t_2;
		#if CYTHON_COMPILING_IN_CPYTHON
		Py_ssize_t size = Py_SIZE(sequence);
		#else
		Py_ssize_t size = PySequence_Size(sequence);
		#endif
		if (unlikely(size != 2)) {
		  if (size > 2) __Pyx_RaiseTooManyValuesError(2);
		  else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
		  {__pyx_filename = __pyx_f[0]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
		}
		#if CYTHON_COMPILING_IN_CPYTHON
		if (likely(PyTuple_CheckExact(sequence))) {
		  __pyx_t_6 = PyTuple_GET_ITEM(sequence, 0); 
		  __pyx_t_1 = PyTuple_GET_ITEM(sequence, 1); 
		} else {
		  __pyx_t_6 = PyList_GET_ITEM(sequence, 0); 
		  __pyx_t_1 = PyList_GET_ITEM(sequence, 1); 
		}
		__Pyx_INCREF(__pyx_t_6);
		__Pyx_INCREF(__pyx_t_1);
		#else
		__pyx_t_6 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
		__pyx_t_1 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
		#endif
		__Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
	  } else
	  {
		Py_ssize_t index = -1;
		__pyx_t_7 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
		__Pyx_GOTREF(__pyx_t_7);
		__Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
		__pyx_t_8 = Py_TYPE(__pyx_t_7)->tp_iternext;
		index = 0; __pyx_t_6 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_6)) goto __pyx_L26_unpacking_failed;
		__Pyx_GOTREF(__pyx_t_6);
		index = 1; __pyx_t_1 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_1)) goto __pyx_L26_unpacking_failed;
		__Pyx_GOTREF(__pyx_t_1);
		if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_7), 2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
		__pyx_t_8 = NULL;
		__Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
		goto __pyx_L27_unpacking_done;
		__pyx_L26_unpacking_failed:;
		__Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
		__pyx_t_8 = NULL;
		if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
		{__pyx_filename = __pyx_f[0]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
		__pyx_L27_unpacking_done:;
	  }
	  __Pyx_DECREF(__pyx_v_match);
	  __pyx_v_match = __pyx_t_6;
	  __pyx_t_6 = 0;
	  __pyx_v__ = __pyx_t_1;
	  __pyx_t_1 = 0;

	  /* "_browse.pyx":79
 * 
 *         match, _ = match_strip(line, '  outputs:')
 *         if match:             # <<<<<<<<<<<<<<
 *             (match, line) = match_strip(lines.next(), '    ')
 *             while match:
 */
	  __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_v_match); if (unlikely(__pyx_t_9 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 79; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
	  if (__pyx_t_9) {

		/* "_browse.pyx":80
 *         match, _ = match_strip(line, '  outputs:')
 *         if match:
 *             (match, line) = match_strip(lines.next(), '    ')             # <<<<<<<<<<<<<<
 *             while match:
 *                 outputs.append(line)
 */
		__pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__match_strip); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 80; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
		__Pyx_GOTREF(__pyx_t_2);
		__pyx_t_1 = PyObject_GetAttr(__pyx_v_lines, __pyx_n_s__next); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 80; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
		__Pyx_GOTREF(__pyx_t_1);
		__pyx_t_6 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 80; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
		__Pyx_GOTREF(__pyx_t_6);
		__Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
		__pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 80; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
		__Pyx_GOTREF(__pyx_t_1);
		PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_6);
		__Pyx_GIVEREF(__pyx_t_6);
		__Pyx_INCREF(((PyObject *)__pyx_kp_s_4));
		PyTuple_SET_ITEM(__pyx_t_1, 1, ((PyObject *)__pyx_kp_s_4));
		__Pyx_GIVEREF(((PyObject *)__pyx_kp_s_4));
		__pyx_t_6 = 0;
		__pyx_t_6 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 80; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
		__Pyx_GOTREF(__pyx_t_6);
		__Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
		__Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
		if ((likely(PyTuple_CheckExact(__pyx_t_6))) || (PyList_CheckExact(__pyx_t_6))) {
		  PyObject* sequence = __pyx_t_6;
		  #if CYTHON_COMPILING_IN_CPYTHON
		  Py_ssize_t size = Py_SIZE(sequence);
		  #else
		  Py_ssize_t size = PySequence_Size(sequence);
		  #endif
		  if (unlikely(size != 2)) {
			if (size > 2) __Pyx_RaiseTooManyValuesError(2);
			else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
			{__pyx_filename = __pyx_f[0]; __pyx_lineno = 80; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
		  }
		  #if CYTHON_COMPILING_IN_CPYTHON
		  if (likely(PyTuple_CheckExact(sequence))) {
			__pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
			__pyx_t_2 = PyTuple_GET_ITEM(sequence, 1); 
		  } else {
			__pyx_t_1 = PyList_GET_ITEM(sequence, 0); 
			__pyx_t_2 = PyList_GET_ITEM(sequence, 1); 
		  }
		  __Pyx_INCREF(__pyx_t_1);
		  __Pyx_INCREF(__pyx_t_2);
		  #else
		  __pyx_t_1 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 80; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
		  __pyx_t_2 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 80; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
		  #endif
		  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
		} else
		{
		  Py_ssize_t index = -1;
		  __pyx_t_7 = PyObject_GetIter(__pyx_t_6); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 80; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
		  __Pyx_GOTREF(__pyx_t_7);
		  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
		  __pyx_t_8 = Py_TYPE(__pyx_t_7)->tp_iternext;
		  index = 0; __pyx_t_1 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_1)) goto __pyx_L29_unpacking_failed;
		  __Pyx_GOTREF(__pyx_t_1);
		  index = 1; __pyx_t_2 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_2)) goto __pyx_L29_unpacking_failed;
		  __Pyx_GOTREF(__pyx_t_2);
		  if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_7), 2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 80; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
		  __pyx_t_8 = NULL;
		  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
		  goto __pyx_L30_unpacking_done;
		  __pyx_L29_unpacking_failed:;
		  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
		  __pyx_t_8 = NULL;
		  if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
		  {__pyx_filename = __pyx_f[0]; __pyx_lineno = 80; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
		  __pyx_L30_unpacking_done:;
		}
		__Pyx_DECREF(__pyx_v_match);
		__pyx_v_match = __pyx_t_1;
		__pyx_t_1 = 0;
		__Pyx_DECREF(__pyx_v_line);
		__pyx_v_line = __pyx_t_2;
		__pyx_t_2 = 0;

		/* "_browse.pyx":81
 *         if match:
 *             (match, line) = match_strip(lines.next(), '    ')
 *             while match:             # <<<<<<<<<<<<<<
 *                 outputs.append(line)
 *                 (match, line) = match_strip(lines.next(), '    ')
 */
		while (1) {
		  __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_v_match); if (unlikely(__pyx_t_9 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 81; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
		  if (!__pyx_t_9) break;

		  /* "_browse.pyx":82
 *             (match, line) = match_strip(lines.next(), '    ')
 *             while match:
 *                 outputs.append(line)             # <<<<<<<<<<<<<<
 *                 (match, line) = match_strip(lines.next(), '    ')
 *     except StopIteration:
 */
		  __pyx_t_10 = PyList_Append(__pyx_v_outputs, __pyx_v_line); if (unlikely(__pyx_t_10 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 82; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

		  /* "_browse.pyx":83
 *             while match:
 *                 outputs.append(line)
 *                 (match, line) = match_strip(lines.next(), '    ')             # <<<<<<<<<<<<<<
 *     except StopIteration:
 *         pass
 */
		  __pyx_t_6 = __Pyx_GetName(__pyx_m, __pyx_n_s__match_strip); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 83; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
		  __Pyx_GOTREF(__pyx_t_6);
		  __pyx_t_2 = PyObject_GetAttr(__pyx_v_lines, __pyx_n_s__next); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 83; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
		  __Pyx_GOTREF(__pyx_t_2);
		  __pyx_t_1 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 83; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
		  __Pyx_GOTREF(__pyx_t_1);
		  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
		  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 83; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
		  __Pyx_GOTREF(__pyx_t_2);
		  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
		  __Pyx_GIVEREF(__pyx_t_1);
		  __Pyx_INCREF(((PyObject *)__pyx_kp_s_4));
		  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_kp_s_4));
		  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_4));
		  __pyx_t_1 = 0;
		  __pyx_t_1 = PyObject_Call(__pyx_t_6, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 83; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
		  __Pyx_GOTREF(__pyx_t_1);
		  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
		  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
		  if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
			PyObject* sequence = __pyx_t_1;
			#if CYTHON_COMPILING_IN_CPYTHON
			Py_ssize_t size = Py_SIZE(sequence);
			#else
			Py_ssize_t size = PySequence_Size(sequence);
			#endif
			if (unlikely(size != 2)) {
			  if (size > 2) __Pyx_RaiseTooManyValuesError(2);
			  else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
			  {__pyx_filename = __pyx_f[0]; __pyx_lineno = 83; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
			}
			#if CYTHON_COMPILING_IN_CPYTHON
			if (likely(PyTuple_CheckExact(sequence))) {
			  __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
			  __pyx_t_6 = PyTuple_GET_ITEM(sequence, 1); 
			} else {
			  __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 
			  __pyx_t_6 = PyList_GET_ITEM(sequence, 1); 
			}
			__Pyx_INCREF(__pyx_t_2);
			__Pyx_INCREF(__pyx_t_6);
			#else
			__pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 83; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
			__pyx_t_6 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 83; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
			#endif
			__Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
		  } else
		  {
			Py_ssize_t index = -1;
			__pyx_t_7 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 83; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
			__Pyx_GOTREF(__pyx_t_7);
			__Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
			__pyx_t_8 = Py_TYPE(__pyx_t_7)->tp_iternext;
			index = 0; __pyx_t_2 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_2)) goto __pyx_L33_unpacking_failed;
			__Pyx_GOTREF(__pyx_t_2);
			index = 1; __pyx_t_6 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_6)) goto __pyx_L33_unpacking_failed;
			__Pyx_GOTREF(__pyx_t_6);
			if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_7), 2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 83; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
			__pyx_t_8 = NULL;
			__Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
			goto __pyx_L34_unpacking_done;
			__pyx_L33_unpacking_failed:;
			__Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
			__pyx_t_8 = NULL;
			if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
			{__pyx_filename = __pyx_f[0]; __pyx_lineno = 83; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
			__pyx_L34_unpacking_done:;
		  }
		  __Pyx_DECREF(__pyx_v_match);
		  __pyx_v_match = __pyx_t_2;
		  __pyx_t_2 = 0;
		  __Pyx_DECREF(__pyx_v_line);
		  __pyx_v_line = __pyx_t_6;
		  __pyx_t_6 = 0;
		}
		goto __pyx_L28;
	  }
	  __pyx_L28:;
	}
	__Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
	__Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
	__Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
	goto __pyx_L10_try_end;
	__pyx_L3_error:;
	__Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
	__Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
	__Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
	__Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;

	/* "_browse.pyx":84
 *                 outputs.append(line)
 *                 (match, line) = match_strip(lines.next(), '    ')
 *     except StopIteration:             # <<<<<<<<<<<<<<
 *         pass
 * 
 */
	__pyx_t_11 = PyErr_ExceptionMatches(__pyx_builtin_StopIteration);
	if (__pyx_t_11) {
	  PyErr_Restore(0,0,0);
	  goto __pyx_L4_exception_handled;
	}
	__Pyx_XGIVEREF(__pyx_t_3);
	__Pyx_XGIVEREF(__pyx_t_4);
	__Pyx_XGIVEREF(__pyx_t_5);
	__Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
	goto __pyx_L1_error;
	__pyx_L4_exception_handled:;
	__Pyx_XGIVEREF(__pyx_t_3);
	__Pyx_XGIVEREF(__pyx_t_4);
	__Pyx_XGIVEREF(__pyx_t_5);
	__Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
	__pyx_L10_try_end:;
  }

  /* "_browse.pyx":87
 *         pass
 * 
 *     return Node(inputs, rule, target, outputs)             # <<<<<<<<<<<<<<
 * 
 * def generate_html(node):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__Node); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 87; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = PyTuple_New(4); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 87; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_INCREF(((PyObject *)__pyx_v_inputs));
  PyTuple_SET_ITEM(__pyx_t_6, 0, ((PyObject *)__pyx_v_inputs));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_inputs));
  __Pyx_INCREF(__pyx_v_rule);
  PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_v_rule);
  __Pyx_GIVEREF(__pyx_v_rule);
  __Pyx_INCREF(__pyx_v_target);
  PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_v_target);
  __Pyx_GIVEREF(__pyx_v_target);
  __Pyx_INCREF(((PyObject *)__pyx_v_outputs));
  PyTuple_SET_ITEM(__pyx_t_6, 3, ((PyObject *)__pyx_v_outputs));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_outputs));
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_6), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 87; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_6)); __pyx_t_6 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("_browse.parse", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_lines);
  __Pyx_XDECREF(__pyx_v_target);
  __Pyx_XDECREF(__pyx_v_rule);
  __Pyx_XDECREF(__pyx_v_inputs);
  __Pyx_XDECREF(__pyx_v_outputs);
  __Pyx_XDECREF(__pyx_v_line);
  __Pyx_XDECREF(__pyx_v_match);
  __Pyx_XDECREF(__pyx_v_type);
  __Pyx_XDECREF(__pyx_v__);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7_browse_5generate_html(PyObject *__pyx_self, PyObject *__pyx_v_node); /*proto*/
static PyMethodDef __pyx_mdef_7_browse_5generate_html = {__Pyx_NAMESTR("generate_html"), (PyCFunction)__pyx_pw_7_browse_5generate_html, METH_O, __Pyx_DOCSTR(0)};
static PyObject *__pyx_pw_7_browse_5generate_html(PyObject *__pyx_self, PyObject *__pyx_v_node) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("generate_html (wrapper)", 0);
  __pyx_r = __pyx_pf_7_browse_4generate_html(__pyx_self, ((PyObject *)__pyx_v_node));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_browse.pyx":89
 *     return Node(inputs, rule, target, outputs)
 * 
 * def generate_html(node):             # <<<<<<<<<<<<<<
 *     print '''<!DOCTYPE html>
 * <style>
 */

static PyObject *__pyx_pf_7_browse_4generate_html(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_node) {
  PyObject *__pyx_v_input = NULL;
  PyObject *__pyx_v_type = NULL;
  PyObject *__pyx_v_extra = NULL;
  PyObject *__pyx_v_output = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *(*__pyx_t_9)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("generate_html", 0);

  /* "_browse.pyx":90
 * 
 * def generate_html(node):
 *     print '''<!DOCTYPE html>             # <<<<<<<<<<<<<<
 * <style>
 * body {
 */
  if (__Pyx_PrintOne(0, ((PyObject *)__pyx_kp_s_9)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 90; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_browse.pyx":116
 * </style>'''
 * 
 *     print '<h1><tt>%s</tt></h1>' % node.target             # <<<<<<<<<<<<<<
 * 
 *     if node.inputs:
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_node, __pyx_n_s__target); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 116; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyNumber_Remainder(((PyObject *)__pyx_kp_s_10), __pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 116; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__Pyx_PrintOne(0, ((PyObject *)__pyx_t_2)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 116; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;

  /* "_browse.pyx":118
 *     print '<h1><tt>%s</tt></h1>' % node.target
 * 
 *     if node.inputs:             # <<<<<<<<<<<<<<
 *         print '<h2>target is built using rule <tt>%s</tt> of</h2>' % node.rule
 *         if len(node.inputs) > 0:
 */
  __pyx_t_2 = PyObject_GetAttr(__pyx_v_node, __pyx_n_s__inputs); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 118; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 118; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

	/* "_browse.pyx":119
 * 
 *     if node.inputs:
 *         print '<h2>target is built using rule <tt>%s</tt> of</h2>' % node.rule             # <<<<<<<<<<<<<<
 *         if len(node.inputs) > 0:
 *             print '<div class=filelist>'
 */
	__pyx_t_2 = PyObject_GetAttr(__pyx_v_node, __pyx_n_s__rule); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 119; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
	__Pyx_GOTREF(__pyx_t_2);
	__pyx_t_1 = PyNumber_Remainder(((PyObject *)__pyx_kp_s_11), __pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 119; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
	__Pyx_GOTREF(((PyObject *)__pyx_t_1));
	__Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
	if (__Pyx_PrintOne(0, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 119; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
	__Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

	/* "_browse.pyx":120
 *     if node.inputs:
 *         print '<h2>target is built using rule <tt>%s</tt> of</h2>' % node.rule
 *         if len(node.inputs) > 0:             # <<<<<<<<<<<<<<
 *             print '<div class=filelist>'
 *             for input, type in sorted(node.inputs):
 */
	__pyx_t_1 = PyObject_GetAttr(__pyx_v_node, __pyx_n_s__inputs); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 120; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
	__Pyx_GOTREF(__pyx_t_1);
	__pyx_t_4 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_4 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 120; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
	__Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
	__pyx_t_3 = (__pyx_t_4 > 0);
	if (__pyx_t_3) {

	  /* "_browse.pyx":121
 *         print '<h2>target is built using rule <tt>%s</tt> of</h2>' % node.rule
 *         if len(node.inputs) > 0:
 *             print '<div class=filelist>'             # <<<<<<<<<<<<<<
 *             for input, type in sorted(node.inputs):
 *                 extra = ''
 */
	  if (__Pyx_PrintOne(0, ((PyObject *)__pyx_kp_s_12)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 121; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

	  /* "_browse.pyx":122
 *         if len(node.inputs) > 0:
 *             print '<div class=filelist>'
 *             for input, type in sorted(node.inputs):             # <<<<<<<<<<<<<<
 *                 extra = ''
 *                 if type:
 */
	  __pyx_t_1 = PyObject_GetAttr(__pyx_v_node, __pyx_n_s__inputs); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 122; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
	  __Pyx_GOTREF(__pyx_t_1);
	  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 122; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
	  __Pyx_GOTREF(__pyx_t_2);
	  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
	  __Pyx_GIVEREF(__pyx_t_1);
	  __pyx_t_1 = 0;
	  __pyx_t_1 = PyObject_Call(__pyx_builtin_sorted, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 122; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
	  __Pyx_GOTREF(__pyx_t_1);
	  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
	  if (PyList_CheckExact(__pyx_t_1) || PyTuple_CheckExact(__pyx_t_1)) {
		__pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_4 = 0;
		__pyx_t_5 = NULL;
	  } else {
		__pyx_t_4 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 122; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
		__Pyx_GOTREF(__pyx_t_2);
		__pyx_t_5 = Py_TYPE(__pyx_t_2)->tp_iternext;
	  }
	  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
	  for (;;) {
		if (!__pyx_t_5 && PyList_CheckExact(__pyx_t_2)) {
		  if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_2)) break;
		  #if CYTHON_COMPILING_IN_CPYTHON
		  __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_1); __pyx_t_4++;
		  #else
		  __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 122; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
		  #endif
		} else if (!__pyx_t_5 && PyTuple_CheckExact(__pyx_t_2)) {
		  if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
		  #if CYTHON_COMPILING_IN_CPYTHON
		  __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_1); __pyx_t_4++;
		  #else
		  __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 122; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
		  #endif
		} else {
		  __pyx_t_1 = __pyx_t_5(__pyx_t_2);
		  if (unlikely(!__pyx_t_1)) {
			if (PyErr_Occurred()) {
			  if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) PyErr_Clear();
			  else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 122; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
			}
			break;
		  }
		  __Pyx_GOTREF(__pyx_t_1);
		}
		if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
		  PyObject* sequence = __pyx_t_1;
		  #if CYTHON_COMPILING_IN_CPYTHON
		  Py_ssize_t size = Py_SIZE(sequence);
		  #else
		  Py_ssize_t size = PySequence_Size(sequence);
		  #endif
		  if (unlikely(size != 2)) {
			if (size > 2) __Pyx_RaiseTooManyValuesError(2);
			else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
			{__pyx_filename = __pyx_f[0]; __pyx_lineno = 122; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
		  }
		  #if CYTHON_COMPILING_IN_CPYTHON
		  if (likely(PyTuple_CheckExact(sequence))) {
			__pyx_t_6 = PyTuple_GET_ITEM(sequence, 0); 
			__pyx_t_7 = PyTuple_GET_ITEM(sequence, 1); 
		  } else {
			__pyx_t_6 = PyList_GET_ITEM(sequence, 0); 
			__pyx_t_7 = PyList_GET_ITEM(sequence, 1); 
		  }
		  __Pyx_INCREF(__pyx_t_6);
		  __Pyx_INCREF(__pyx_t_7);
		  #else
		  __pyx_t_6 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 122; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
		  __pyx_t_7 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 122; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
		  #endif
		  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
		} else
		{
		  Py_ssize_t index = -1;
		  __pyx_t_8 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 122; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
		  __Pyx_GOTREF(__pyx_t_8);
		  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
		  __pyx_t_9 = Py_TYPE(__pyx_t_8)->tp_iternext;
		  index = 0; __pyx_t_6 = __pyx_t_9(__pyx_t_8); if (unlikely(!__pyx_t_6)) goto __pyx_L7_unpacking_failed;
		  __Pyx_GOTREF(__pyx_t_6);
		  index = 1; __pyx_t_7 = __pyx_t_9(__pyx_t_8); if (unlikely(!__pyx_t_7)) goto __pyx_L7_unpacking_failed;
		  __Pyx_GOTREF(__pyx_t_7);
		  if (__Pyx_IternextUnpackEndCheck(__pyx_t_9(__pyx_t_8), 2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 122; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
		  __pyx_t_9 = NULL;
		  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
		  goto __pyx_L8_unpacking_done;
		  __pyx_L7_unpacking_failed:;
		  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
		  __pyx_t_9 = NULL;
		  if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
		  {__pyx_filename = __pyx_f[0]; __pyx_lineno = 122; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
		  __pyx_L8_unpacking_done:;
		}
		__Pyx_XDECREF(__pyx_v_input);
		__pyx_v_input = __pyx_t_6;
		__pyx_t_6 = 0;
		__Pyx_XDECREF(__pyx_v_type);
		__pyx_v_type = __pyx_t_7;
		__pyx_t_7 = 0;

		/* "_browse.pyx":123
 *             print '<div class=filelist>'
 *             for input, type in sorted(node.inputs):
 *                 extra = ''             # <<<<<<<<<<<<<<
 *                 if type:
 *                     extra = ' (%s)' % type
 */
		__Pyx_INCREF(((PyObject *)__pyx_kp_s_13));
		__Pyx_XDECREF(__pyx_v_extra);
		__pyx_v_extra = ((PyObject *)__pyx_kp_s_13);

		/* "_browse.pyx":124
 *             for input, type in sorted(node.inputs):
 *                 extra = ''
 *                 if type:             # <<<<<<<<<<<<<<
 *                     extra = ' (%s)' % type
 *                 print '<tt><a href="?%s">%s</a>%s</tt><br>' % (input, input, extra)
 */
		__pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_type); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 124; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
		if (__pyx_t_3) {

		  /* "_browse.pyx":125
 *                 extra = ''
 *                 if type:
 *                     extra = ' (%s)' % type             # <<<<<<<<<<<<<<
 *                 print '<tt><a href="?%s">%s</a>%s</tt><br>' % (input, input, extra)
 *             print '</div>'
 */
		  __pyx_t_1 = PyNumber_Remainder(((PyObject *)__pyx_kp_s_14), __pyx_v_type); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 125; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
		  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
		  __Pyx_DECREF(__pyx_v_extra);
		  __pyx_v_extra = ((PyObject *)__pyx_t_1);
		  __pyx_t_1 = 0;
		  goto __pyx_L9;
		}
		__pyx_L9:;

		/* "_browse.pyx":126
 *                 if type:
 *                     extra = ' (%s)' % type
 *                 print '<tt><a href="?%s">%s</a>%s</tt><br>' % (input, input, extra)             # <<<<<<<<<<<<<<
 *             print '</div>'
 * 
 */
		__pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 126; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
		__Pyx_GOTREF(__pyx_t_1);
		__Pyx_INCREF(__pyx_v_input);
		PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_input);
		__Pyx_GIVEREF(__pyx_v_input);
		__Pyx_INCREF(__pyx_v_input);
		PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_input);
		__Pyx_GIVEREF(__pyx_v_input);
		__Pyx_INCREF(__pyx_v_extra);
		PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_extra);
		__Pyx_GIVEREF(__pyx_v_extra);
		__pyx_t_7 = PyNumber_Remainder(((PyObject *)__pyx_kp_s_15), ((PyObject *)__pyx_t_1)); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 126; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
		__Pyx_GOTREF(((PyObject *)__pyx_t_7));
		__Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
		if (__Pyx_PrintOne(0, ((PyObject *)__pyx_t_7)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 126; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
		__Pyx_DECREF(((PyObject *)__pyx_t_7)); __pyx_t_7 = 0;
	  }
	  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

	  /* "_browse.pyx":127
 *                     extra = ' (%s)' % type
 *                 print '<tt><a href="?%s">%s</a>%s</tt><br>' % (input, input, extra)
 *             print '</div>'             # <<<<<<<<<<<<<<
 * 
 *     if node.outputs:
 */
	  if (__Pyx_PrintOne(0, ((PyObject *)__pyx_kp_s_16)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 127; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
	  goto __pyx_L4;
	}
	__pyx_L4:;
	goto __pyx_L3;
  }
  __pyx_L3:;

  /* "_browse.pyx":129
 *             print '</div>'
 * 
 *     if node.outputs:             # <<<<<<<<<<<<<<
 *         print '<h2>dependent edges build:</h2>'
 *         print '<div class=filelist>'
 */
  __pyx_t_2 = PyObject_GetAttr(__pyx_v_node, __pyx_n_s__outputs); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 129; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 129; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

	/* "_browse.pyx":130
 * 
 *     if node.outputs:
 *         print '<h2>dependent edges build:</h2>'             # <<<<<<<<<<<<<<
 *         print '<div class=filelist>'
 *         for output in sorted(node.outputs):
 */
	if (__Pyx_PrintOne(0, ((PyObject *)__pyx_kp_s_17)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 130; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

	/* "_browse.pyx":131
 *     if node.outputs:
 *         print '<h2>dependent edges build:</h2>'
 *         print '<div class=filelist>'             # <<<<<<<<<<<<<<
 *         for output in sorted(node.outputs):
 *             print '<tt><a href="?%s">%s</a></tt><br>' % (output, output)
 */
	if (__Pyx_PrintOne(0, ((PyObject *)__pyx_kp_s_12)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 131; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

	/* "_browse.pyx":132
 *         print '<h2>dependent edges build:</h2>'
 *         print '<div class=filelist>'
 *         for output in sorted(node.outputs):             # <<<<<<<<<<<<<<
 *             print '<tt><a href="?%s">%s</a></tt><br>' % (output, output)
 *         print '</div>'
 */
	__pyx_t_2 = PyObject_GetAttr(__pyx_v_node, __pyx_n_s__outputs); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 132; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
	__Pyx_GOTREF(__pyx_t_2);
	__pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 132; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
	__Pyx_GOTREF(__pyx_t_7);
	PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_2);
	__Pyx_GIVEREF(__pyx_t_2);
	__pyx_t_2 = 0;
	__pyx_t_2 = PyObject_Call(__pyx_builtin_sorted, ((PyObject *)__pyx_t_7), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 132; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
	__Pyx_GOTREF(__pyx_t_2);
	__Pyx_DECREF(((PyObject *)__pyx_t_7)); __pyx_t_7 = 0;
	if (PyList_CheckExact(__pyx_t_2) || PyTuple_CheckExact(__pyx_t_2)) {
	  __pyx_t_7 = __pyx_t_2; __Pyx_INCREF(__pyx_t_7); __pyx_t_4 = 0;
	  __pyx_t_5 = NULL;
	} else {
	  __pyx_t_4 = -1; __pyx_t_7 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 132; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
	  __Pyx_GOTREF(__pyx_t_7);
	  __pyx_t_5 = Py_TYPE(__pyx_t_7)->tp_iternext;
	}
	__Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
	for (;;) {
	  if (!__pyx_t_5 && PyList_CheckExact(__pyx_t_7)) {
		if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_7)) break;
		#if CYTHON_COMPILING_IN_CPYTHON
		__pyx_t_2 = PyList_GET_ITEM(__pyx_t_7, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++;
		#else
		__pyx_t_2 = PySequence_ITEM(__pyx_t_7, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 132; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
		#endif
	  } else if (!__pyx_t_5 && PyTuple_CheckExact(__pyx_t_7)) {
		if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_7)) break;
		#if CYTHON_COMPILING_IN_CPYTHON
		__pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_7, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++;
		#else
		__pyx_t_2 = PySequence_ITEM(__pyx_t_7, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 132; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
		#endif
	  } else {
		__pyx_t_2 = __pyx_t_5(__pyx_t_7);
		if (unlikely(!__pyx_t_2)) {
		  if (PyErr_Occurred()) {
			if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) PyErr_Clear();
			else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 132; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
		  }
		  break;
		}
		__Pyx_GOTREF(__pyx_t_2);
	  }
	  __Pyx_XDECREF(__pyx_v_output);
	  __pyx_v_output = __pyx_t_2;
	  __pyx_t_2 = 0;

	  /* "_browse.pyx":133
 *         print '<div class=filelist>'
 *         for output in sorted(node.outputs):
 *             print '<tt><a href="?%s">%s</a></tt><br>' % (output, output)             # <<<<<<<<<<<<<<
 *         print '</div>'
 * 
 */
	  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 133; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
	  __Pyx_GOTREF(__pyx_t_2);
	  __Pyx_INCREF(__pyx_v_output);
	  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_output);
	  __Pyx_GIVEREF(__pyx_v_output);
	  __Pyx_INCREF(__pyx_v_output);
	  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_output);
	  __Pyx_GIVEREF(__pyx_v_output);
	  __pyx_t_1 = PyNumber_Remainder(((PyObject *)__pyx_kp_s_18), ((PyObject *)__pyx_t_2)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 133; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
	  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
	  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
	  if (__Pyx_PrintOne(0, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 133; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
	  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
	}
	__Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

	/* "_browse.pyx":134
 *         for output in sorted(node.outputs):
 *             print '<tt><a href="?%s">%s</a></tt><br>' % (output, output)
 *         print '</div>'             # <<<<<<<<<<<<<<
 * 
 * def ninja_dump(target):
 */
	if (__Pyx_PrintOne(0, ((PyObject *)__pyx_kp_s_16)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 134; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
	goto __pyx_L10;
  }
  __pyx_L10:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("_browse.generate_html", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_input);
  __Pyx_XDECREF(__pyx_v_type);
  __Pyx_XDECREF(__pyx_v_extra);
  __Pyx_XDECREF(__pyx_v_output);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7_browse_7ninja_dump(PyObject *__pyx_self, PyObject *__pyx_v_target); /*proto*/
static PyMethodDef __pyx_mdef_7_browse_7ninja_dump = {__Pyx_NAMESTR("ninja_dump"), (PyCFunction)__pyx_pw_7_browse_7ninja_dump, METH_O, __Pyx_DOCSTR(0)};
static PyObject *__pyx_pw_7_browse_7ninja_dump(PyObject *__pyx_self, PyObject *__pyx_v_target) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("ninja_dump (wrapper)", 0);
  __pyx_r = __pyx_pf_7_browse_6ninja_dump(__pyx_self, ((PyObject *)__pyx_v_target));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_browse.pyx":136
 *         print '</div>'
 * 
 * def ninja_dump(target):             # <<<<<<<<<<<<<<
 *     global cmdStr
 *     proc = subprocess.Popen([cmdStr, '-t', 'query', target],
 */

static PyObject *__pyx_pf_7_browse_6ninja_dump(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_target) {
  PyObject *__pyx_v_proc = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("ninja_dump", 0);

  /* "_browse.pyx":138
 * def ninja_dump(target):
 *     global cmdStr
 *     proc = subprocess.Popen([cmdStr, '-t', 'query', target],             # <<<<<<<<<<<<<<
 *                             stdout=subprocess.PIPE)
 *     return proc.communicate()[0]
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__subprocess); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 138; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__Popen); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 138; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyBytes_FromString(__pyx_v_7_browse_cmdStr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 138; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_t_3 = PyList_New(4); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 138; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyList_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_t_1));
  __Pyx_GIVEREF(((PyObject *)__pyx_t_1));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_19));
  PyList_SET_ITEM(__pyx_t_3, 1, ((PyObject *)__pyx_kp_s_19));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_19));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__query));
  PyList_SET_ITEM(__pyx_t_3, 2, ((PyObject *)__pyx_n_s__query));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__query));
  __Pyx_INCREF(__pyx_v_target);
  PyList_SET_ITEM(__pyx_t_3, 3, __pyx_v_target);
  __Pyx_GIVEREF(__pyx_v_target);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 138; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_t_3));
  __Pyx_GIVEREF(((PyObject *)__pyx_t_3));
  __pyx_t_3 = 0;
  __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 138; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_3));

  /* "_browse.pyx":139
 *     global cmdStr
 *     proc = subprocess.Popen([cmdStr, '-t', 'query', target],
 *                             stdout=subprocess.PIPE)             # <<<<<<<<<<<<<<
 *     return proc.communicate()[0]
 * 
 */
  __pyx_t_4 = __Pyx_GetName(__pyx_m, __pyx_n_s__subprocess); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 139; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyObject_GetAttr(__pyx_t_4, __pyx_n_s__PIPE); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 139; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_3, ((PyObject *)__pyx_n_s__stdout), __pyx_t_5) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 138; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_t_1), ((PyObject *)__pyx_t_3)); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 138; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
  __pyx_v_proc = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "_browse.pyx":140
 *     proc = subprocess.Popen([cmdStr, '-t', 'query', target],
 *                             stdout=subprocess.PIPE)
 *     return proc.communicate()[0]             # <<<<<<<<<<<<<<
 * 
 * class RequestHandler(BaseHTTPServer.BaseHTTPRequestHandler):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_5 = PyObject_GetAttr(__pyx_v_proc, __pyx_n_s__communicate); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 140; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = PyObject_Call(__pyx_t_5, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 140; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_t_3, 0, sizeof(long), PyInt_FromLong); if (!__pyx_t_5) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 140; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("_browse.ninja_dump", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_proc);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7_browse_14RequestHandler_1do_GET(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_7_browse_14RequestHandler_1do_GET = {__Pyx_NAMESTR("do_GET"), (PyCFunction)__pyx_pw_7_browse_14RequestHandler_1do_GET, METH_O, __Pyx_DOCSTR(0)};
static PyObject *__pyx_pw_7_browse_14RequestHandler_1do_GET(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("do_GET (wrapper)", 0);
  __pyx_r = __pyx_pf_7_browse_14RequestHandler_do_GET(__pyx_self, ((PyObject *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_browse.pyx":143
 * 
 * class RequestHandler(BaseHTTPServer.BaseHTTPRequestHandler):
 *     def do_GET(self):             # <<<<<<<<<<<<<<
 *         global locationStr
 *         assert self.path[0] == '/'
 */

static PyObject *__pyx_pf_7_browse_14RequestHandler_do_GET(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_v_target = NULL;
  PyObject *__pyx_v_input = NULL;
  PyObject *__pyx_v_stdout = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("do_GET", 0);

  /* "_browse.pyx":145
 *     def do_GET(self):
 *         global locationStr
 *         assert self.path[0] == '/'             # <<<<<<<<<<<<<<
 *         target = self.path[1:]
 * 
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__path); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 145; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_1, 0, sizeof(long), PyInt_FromLong); if (!__pyx_t_2) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 145; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyString_Equals(__pyx_t_2, ((PyObject *)__pyx_kp_s_20), Py_EQ); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 145; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_3)) {
	PyErr_SetNone(PyExc_AssertionError);
	{__pyx_filename = __pyx_f[0]; __pyx_lineno = 145; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  #endif

  /* "_browse.pyx":146
 *         global locationStr
 *         assert self.path[0] == '/'
 *         target = self.path[1:]             # <<<<<<<<<<<<<<
 * 
 *         if target == '':
 */
  __pyx_t_2 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__path); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PySequence_GetSlice(__pyx_t_2, 1, PY_SSIZE_T_MAX); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_target = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "_browse.pyx":148
 *         target = self.path[1:]
 * 
 *         if target == '':             # <<<<<<<<<<<<<<
 *             self.send_response(302)
 *             self.send_header('Location', '?' + locationStr)
 */
  __pyx_t_3 = __Pyx_PyString_Equals(__pyx_v_target, ((PyObject *)__pyx_kp_s_13), Py_EQ); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 148; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_3) {

	/* "_browse.pyx":149
 * 
 *         if target == '':
 *             self.send_response(302)             # <<<<<<<<<<<<<<
 *             self.send_header('Location', '?' + locationStr)
 *             self.end_headers()
 */
	__pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__send_response); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 149; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
	__Pyx_GOTREF(__pyx_t_1);
	__pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_21), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 149; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
	__Pyx_GOTREF(__pyx_t_2);
	__Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
	__Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

	/* "_browse.pyx":150
 *         if target == '':
 *             self.send_response(302)
 *             self.send_header('Location', '?' + locationStr)             # <<<<<<<<<<<<<<
 *             self.end_headers()
 *             return
 */
	__pyx_t_2 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__send_header); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 150; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
	__Pyx_GOTREF(__pyx_t_2);
	__pyx_t_1 = PyBytes_FromString(__pyx_v_7_browse_locationStr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 150; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
	__Pyx_GOTREF(((PyObject *)__pyx_t_1));
	__pyx_t_4 = PyNumber_Add(((PyObject *)__pyx_kp_s_22), ((PyObject *)__pyx_t_1)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 150; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
	__Pyx_GOTREF(__pyx_t_4);
	__Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
	__pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 150; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
	__Pyx_GOTREF(__pyx_t_1);
	__Pyx_INCREF(((PyObject *)__pyx_n_s__Location));
	PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_n_s__Location));
	__Pyx_GIVEREF(((PyObject *)__pyx_n_s__Location));
	PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_4);
	__Pyx_GIVEREF(__pyx_t_4);
	__pyx_t_4 = 0;
	__pyx_t_4 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 150; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
	__Pyx_GOTREF(__pyx_t_4);
	__Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
	__Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
	__Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

	/* "_browse.pyx":151
 *             self.send_response(302)
 *             self.send_header('Location', '?' + locationStr)
 *             self.end_headers()             # <<<<<<<<<<<<<<
 *             return
 * 
 */
	__pyx_t_4 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__end_headers); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 151; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
	__Pyx_GOTREF(__pyx_t_4);
	__pyx_t_1 = PyObject_Call(__pyx_t_4, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 151; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
	__Pyx_GOTREF(__pyx_t_1);
	__Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
	__Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

	/* "_browse.pyx":152
 *             self.send_header('Location', '?' + locationStr)
 *             self.end_headers()
 *             return             # <<<<<<<<<<<<<<
 * 
 *         if not target.startswith('?'):
 */
	__Pyx_XDECREF(__pyx_r);
	__pyx_r = Py_None; __Pyx_INCREF(Py_None);
	goto __pyx_L0;
	goto __pyx_L3;
  }
  __pyx_L3:;

  /* "_browse.pyx":154
 *             return
 * 
 *         if not target.startswith('?'):             # <<<<<<<<<<<<<<
 *             self.send_response(404)
 *             self.end_headers()
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_target, __pyx_n_s__startswith); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 154; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_23), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 154; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 154; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_5 = (!__pyx_t_3);
  if (__pyx_t_5) {

	/* "_browse.pyx":155
 * 
 *         if not target.startswith('?'):
 *             self.send_response(404)             # <<<<<<<<<<<<<<
 *             self.end_headers()
 *             return
 */
	__pyx_t_4 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__send_response); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
	__Pyx_GOTREF(__pyx_t_4);
	__pyx_t_1 = PyObject_Call(__pyx_t_4, ((PyObject *)__pyx_k_tuple_24), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
	__Pyx_GOTREF(__pyx_t_1);
	__Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
	__Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

	/* "_browse.pyx":156
 *         if not target.startswith('?'):
 *             self.send_response(404)
 *             self.end_headers()             # <<<<<<<<<<<<<<
 *             return
 *         target = target[1:]
 */
	__pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__end_headers); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 156; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
	__Pyx_GOTREF(__pyx_t_1);
	__pyx_t_4 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 156; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
	__Pyx_GOTREF(__pyx_t_4);
	__Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
	__Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

	/* "_browse.pyx":157
 *             self.send_response(404)
 *             self.end_headers()
 *             return             # <<<<<<<<<<<<<<
 *         target = target[1:]
 * 
 */
	__Pyx_XDECREF(__pyx_r);
	__pyx_r = Py_None; __Pyx_INCREF(Py_None);
	goto __pyx_L0;
	goto __pyx_L4;
  }
  __pyx_L4:;

  /* "_browse.pyx":158
 *             self.end_headers()
 *             return
 *         target = target[1:]             # <<<<<<<<<<<<<<
 * 
 *         input = ninja_dump(target)
 */
  __pyx_t_4 = __Pyx_PySequence_GetSlice(__pyx_v_target, 1, PY_SSIZE_T_MAX); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 158; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_v_target);
  __pyx_v_target = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "_browse.pyx":160
 *         target = target[1:]
 * 
 *         input = ninja_dump(target)             # <<<<<<<<<<<<<<
 * 
 *         self.send_response(200)
 */
  __pyx_t_4 = __Pyx_GetName(__pyx_m, __pyx_n_s__ninja_dump); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 160; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 160; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_target);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_target);
  __Pyx_GIVEREF(__pyx_v_target);
  __pyx_t_2 = PyObject_Call(__pyx_t_4, ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 160; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_v_input = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "_browse.pyx":162
 *         input = ninja_dump(target)
 * 
 *         self.send_response(200)             # <<<<<<<<<<<<<<
 *         self.end_headers()
 *         stdout = sys.stdout
 */
  __pyx_t_2 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__send_response); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 162; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_k_tuple_25), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 162; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_browse.pyx":163
 * 
 *         self.send_response(200)
 *         self.end_headers()             # <<<<<<<<<<<<<<
 *         stdout = sys.stdout
 *         sys.stdout = self.wfile
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__end_headers); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 163; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 163; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "_browse.pyx":164
 *         self.send_response(200)
 *         self.end_headers()
 *         stdout = sys.stdout             # <<<<<<<<<<<<<<
 *         sys.stdout = self.wfile
 *         try:
 */
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__sys); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 164; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__stdout); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 164; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_stdout = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "_browse.pyx":165
 *         self.end_headers()
 *         stdout = sys.stdout
 *         sys.stdout = self.wfile             # <<<<<<<<<<<<<<
 *         try:
 *             generate_html(parse(input.strip()))
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__wfile); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 165; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__sys); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 165; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyObject_SetAttr(__pyx_t_2, __pyx_n_s__stdout, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 165; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "_browse.pyx":166
 *         stdout = sys.stdout
 *         sys.stdout = self.wfile
 *         try:             # <<<<<<<<<<<<<<
 *             generate_html(parse(input.strip()))
 *         finally:
 */
  /*try:*/ {

	/* "_browse.pyx":167
 *         sys.stdout = self.wfile
 *         try:
 *             generate_html(parse(input.strip()))             # <<<<<<<<<<<<<<
 *         finally:
 *             sys.stdout = stdout
 */
	__pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__generate_html); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L6;}
	__Pyx_GOTREF(__pyx_t_2);
	__pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__parse); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L6;}
	__Pyx_GOTREF(__pyx_t_1);
	__pyx_t_4 = PyObject_GetAttr(__pyx_v_input, __pyx_n_s__strip); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L6;}
	__Pyx_GOTREF(__pyx_t_4);
	__pyx_t_6 = PyObject_Call(__pyx_t_4, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L6;}
	__Pyx_GOTREF(__pyx_t_6);
	__Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
	__pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L6;}
	__Pyx_GOTREF(__pyx_t_4);
	PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_6);
	__Pyx_GIVEREF(__pyx_t_6);
	__pyx_t_6 = 0;
	__pyx_t_6 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L6;}
	__Pyx_GOTREF(__pyx_t_6);
	__Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
	__Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
	__pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L6;}
	__Pyx_GOTREF(__pyx_t_4);
	PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_6);
	__Pyx_GIVEREF(__pyx_t_6);
	__pyx_t_6 = 0;
	__pyx_t_6 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L6;}
	__Pyx_GOTREF(__pyx_t_6);
	__Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
	__Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
	__Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }

  /* "_browse.pyx":169
 *             generate_html(parse(input.strip()))
 *         finally:
 *             sys.stdout = stdout             # <<<<<<<<<<<<<<
 * 
 *     def log_message(self, format, *args):
 */
  /*finally:*/ {
	int __pyx_why;
	PyObject *__pyx_exc_type, *__pyx_exc_value, *__pyx_exc_tb;
	int __pyx_exc_lineno;
	__pyx_exc_type = 0; __pyx_exc_value = 0; __pyx_exc_tb = 0; __pyx_exc_lineno = 0;
	__pyx_why = 0; goto __pyx_L7;
	__pyx_L6: {
	  __pyx_why = 4;
	  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
	  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
	  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
	  __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
	  __Pyx_ErrFetch(&__pyx_exc_type, &__pyx_exc_value, &__pyx_exc_tb);
	  __pyx_exc_lineno = __pyx_lineno;
	  goto __pyx_L7;
	}
	__pyx_L7:;
	__pyx_t_6 = __Pyx_GetName(__pyx_m, __pyx_n_s__sys); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 169; __pyx_clineno = __LINE__; goto __pyx_L8_error;}
	__Pyx_GOTREF(__pyx_t_6);
	if (PyObject_SetAttr(__pyx_t_6, __pyx_n_s__stdout, __pyx_v_stdout) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 169; __pyx_clineno = __LINE__; goto __pyx_L8_error;}
	__Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
	goto __pyx_L9;
	__pyx_L8_error:;
	if (__pyx_why == 4) {
	  Py_XDECREF(__pyx_exc_type);
	  Py_XDECREF(__pyx_exc_value);
	  Py_XDECREF(__pyx_exc_tb);
	}
	goto __pyx_L1_error;
	__pyx_L9:;
	switch (__pyx_why) {
	  case 4: {
		__Pyx_ErrRestore(__pyx_exc_type, __pyx_exc_value, __pyx_exc_tb);
		__pyx_lineno = __pyx_exc_lineno;
		__pyx_exc_type = 0;
		__pyx_exc_value = 0;
		__pyx_exc_tb = 0;
		goto __pyx_L1_error;
	  }
	}
  }

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("_browse.RequestHandler.do_GET", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_target);
  __Pyx_XDECREF(__pyx_v_input);
  __Pyx_XDECREF(__pyx_v_stdout);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7_browse_14RequestHandler_3log_message(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_7_browse_14RequestHandler_3log_message = {__Pyx_NAMESTR("log_message"), (PyCFunction)__pyx_pw_7_browse_14RequestHandler_3log_message, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)};
static PyObject *__pyx_pw_7_browse_14RequestHandler_3log_message(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_self = 0;
  CYTHON_UNUSED PyObject *__pyx_v_format = 0;
  CYTHON_UNUSED PyObject *__pyx_v_args = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("log_message (wrapper)", 0);
  if (PyTuple_GET_SIZE(__pyx_args) > 2) {
	__pyx_v_args = PyTuple_GetSlice(__pyx_args, 2, PyTuple_GET_SIZE(__pyx_args));
	if (unlikely(!__pyx_v_args)) {
	  __Pyx_RefNannyFinishContext();
	  return NULL;
	}
	__Pyx_GOTREF(__pyx_v_args);
  } else {
	__pyx_v_args = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  {
	static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__self,&__pyx_n_s__format,0};
	PyObject* values[2] = {0,0};
	if (unlikely(__pyx_kwds)) {
	  Py_ssize_t kw_args;
	  const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
	  switch (pos_args) {
		default:
		case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
		case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
		case  0: break;
	  }
	  kw_args = PyDict_Size(__pyx_kwds);
	  switch (pos_args) {
		case  0:
		if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__self)) != 0)) kw_args--;
		else goto __pyx_L5_argtuple_error;
		case  1:
		if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__format)) != 0)) kw_args--;
		else {
		  __Pyx_RaiseArgtupleInvalid("log_message", 0, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 171; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
		}
	  }
	  if (unlikely(kw_args > 0)) {
		const Py_ssize_t used_pos_args = (pos_args < 2) ? pos_args : 2;
		if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, used_pos_args, "log_message") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 171; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
	  }
	} else if (PyTuple_GET_SIZE(__pyx_args) < 2) {
	  goto __pyx_L5_argtuple_error;
	} else {
	  values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
	  values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
	}
	__pyx_v_self = values[0];
	__pyx_v_format = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("log_message", 0, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 171; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_args); __pyx_v_args = 0;
  __Pyx_AddTraceback("_browse.RequestHandler.log_message", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7_browse_14RequestHandler_2log_message(__pyx_self, __pyx_v_self, __pyx_v_format, __pyx_v_args);
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_browse.pyx":171
 *             sys.stdout = stdout
 * 
 *     def log_message(self, format, *args):             # <<<<<<<<<<<<<<
 *         pass  # Swallow console spam.
 * 
 */

static PyObject *__pyx_pf_7_browse_14RequestHandler_2log_message(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_format, CYTHON_UNUSED PyObject *__pyx_v_args) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("log_message", 0);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_browse.pyx":174
 *         pass  # Swallow console spam.
 * 
 * cpdef public int browseBuild(char* cmd, char* location):             # <<<<<<<<<<<<<<
 *     cdef int port = 8000
 *     global locationStr, cmdStr
 */

static PyObject *__pyx_pw_7_browse_9browseBuild(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
int browseBuild(char *__pyx_v_cmd, char *__pyx_v_location, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_v_port;
  PyObject *__pyx_v_httpd = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("browseBuild", 0);

  /* "_browse.pyx":175
 * 
 * cpdef public int browseBuild(char* cmd, char* location):
 *     cdef int port = 8000             # <<<<<<<<<<<<<<
 *     global locationStr, cmdStr
 *     locationStr = location
 */
  __pyx_v_port = 8000;

  /* "_browse.pyx":177
 *     cdef int port = 8000
 *     global locationStr, cmdStr
 *     locationStr = location             # <<<<<<<<<<<<<<
 *     cmdStr = cmd
 *     httpd = BaseHTTPServer.HTTPServer(('',port), RequestHandler)
 */
  __pyx_v_7_browse_locationStr = __pyx_v_location;

  /* "_browse.pyx":178
 *     global locationStr, cmdStr
 *     locationStr = location
 *     cmdStr = cmd             # <<<<<<<<<<<<<<
 *     httpd = BaseHTTPServer.HTTPServer(('',port), RequestHandler)
 *     try:
 */
  __pyx_v_7_browse_cmdStr = __pyx_v_cmd;

  /* "_browse.pyx":179
 *     locationStr = location
 *     cmdStr = cmd
 *     httpd = BaseHTTPServer.HTTPServer(('',port), RequestHandler)             # <<<<<<<<<<<<<<
 *     try:
 *         print 'Web server running on port %d, ctl-C to abort...' % port
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__BaseHTTPServer); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 179; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__HTTPServer); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 179; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyInt_FromLong(__pyx_v_port); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 179; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 179; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_13));
  PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_kp_s_13));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_13));
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__RequestHandler); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 179; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 179; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_4, 0, ((PyObject *)__pyx_t_3));
  __Pyx_GIVEREF(((PyObject *)__pyx_t_3));
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_3 = 0;
  __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 179; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
  __pyx_v_httpd = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "_browse.pyx":180
 *     cmdStr = cmd
 *     httpd = BaseHTTPServer.HTTPServer(('',port), RequestHandler)
 *     try:             # <<<<<<<<<<<<<<
 *         print 'Web server running on port %d, ctl-C to abort...' % port
 *         webbrowser.open_new('http://localhost:%s' % port)
 */
  {
	__Pyx_ExceptionSave(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7);
	__Pyx_XGOTREF(__pyx_t_5);
	__Pyx_XGOTREF(__pyx_t_6);
	__Pyx_XGOTREF(__pyx_t_7);
	/*try:*/ {

	  /* "_browse.pyx":181
 *     httpd = BaseHTTPServer.HTTPServer(('',port), RequestHandler)
 *     try:
 *         print 'Web server running on port %d, ctl-C to abort...' % port             # <<<<<<<<<<<<<<
 *         webbrowser.open_new('http://localhost:%s' % port)
 *         httpd.serve_forever()
 */
	  __pyx_t_1 = PyInt_FromLong(__pyx_v_port); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 181; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
	  __Pyx_GOTREF(__pyx_t_1);
	  __pyx_t_4 = PyNumber_Remainder(((PyObject *)__pyx_kp_s_26), __pyx_t_1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 181; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
	  __Pyx_GOTREF(((PyObject *)__pyx_t_4));
	  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
	  if (__Pyx_PrintOne(0, ((PyObject *)__pyx_t_4)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 181; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
	  __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;

	  /* "_browse.pyx":182
 *     try:
 *         print 'Web server running on port %d, ctl-C to abort...' % port
 *         webbrowser.open_new('http://localhost:%s' % port)             # <<<<<<<<<<<<<<
 *         httpd.serve_forever()
 *     except KeyboardInterrupt:
 */
	  __pyx_t_4 = __Pyx_GetName(__pyx_m, __pyx_n_s__webbrowser); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 182; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
	  __Pyx_GOTREF(__pyx_t_4);
	  __pyx_t_1 = PyObject_GetAttr(__pyx_t_4, __pyx_n_s__open_new); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 182; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
	  __Pyx_GOTREF(__pyx_t_1);
	  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
	  __pyx_t_4 = PyInt_FromLong(__pyx_v_port); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 182; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
	  __Pyx_GOTREF(__pyx_t_4);
	  __pyx_t_2 = PyNumber_Remainder(((PyObject *)__pyx_kp_s_27), __pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 182; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
	  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
	  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
	  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 182; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
	  __Pyx_GOTREF(__pyx_t_4);
	  PyTuple_SET_ITEM(__pyx_t_4, 0, ((PyObject *)__pyx_t_2));
	  __Pyx_GIVEREF(((PyObject *)__pyx_t_2));
	  __pyx_t_2 = 0;
	  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 182; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
	  __Pyx_GOTREF(__pyx_t_2);
	  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
	  __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
	  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

	  /* "_browse.pyx":183
 *         print 'Web server running on port %d, ctl-C to abort...' % port
 *         webbrowser.open_new('http://localhost:%s' % port)
 *         httpd.serve_forever()             # <<<<<<<<<<<<<<
 *     except KeyboardInterrupt:
 *         print
 */
	  __pyx_t_2 = PyObject_GetAttr(__pyx_v_httpd, __pyx_n_s__serve_forever); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 183; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
	  __Pyx_GOTREF(__pyx_t_2);
	  __pyx_t_4 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 183; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
	  __Pyx_GOTREF(__pyx_t_4);
	  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
	  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
	}
	__Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
	__Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
	__Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
	goto __pyx_L10_try_end;
	__pyx_L3_error:;
	__Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
	__Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
	__Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
	__Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;

	/* "_browse.pyx":184
 *         webbrowser.open_new('http://localhost:%s' % port)
 *         httpd.serve_forever()
 *     except KeyboardInterrupt:             # <<<<<<<<<<<<<<
 *         print
 *         pass
 */
	__pyx_t_8 = PyErr_ExceptionMatches(__pyx_builtin_KeyboardInterrupt);
	if (__pyx_t_8) {
	  __Pyx_AddTraceback("_browse.browseBuild", __pyx_clineno, __pyx_lineno, __pyx_filename);
	  if (__Pyx_GetException(&__pyx_t_4, &__pyx_t_2, &__pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 184; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
	  __Pyx_GOTREF(__pyx_t_4);
	  __Pyx_GOTREF(__pyx_t_2);
	  __Pyx_GOTREF(__pyx_t_1);

	  /* "_browse.pyx":185
 *         httpd.serve_forever()
 *     except KeyboardInterrupt:
 *         print             # <<<<<<<<<<<<<<
 *         pass
 *     return 0
 */
	  if (__Pyx_Print(0, ((PyObject *)__pyx_empty_tuple), 1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 185; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
	  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
	  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
	  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
	  goto __pyx_L4_exception_handled;
	}
	__pyx_L5_except_error:;
	__Pyx_XGIVEREF(__pyx_t_5);
	__Pyx_XGIVEREF(__pyx_t_6);
	__Pyx_XGIVEREF(__pyx_t_7);
	__Pyx_ExceptionReset(__pyx_t_5, __pyx_t_6, __pyx_t_7);
	goto __pyx_L1_error;
	__pyx_L4_exception_handled:;
	__Pyx_XGIVEREF(__pyx_t_5);
	__Pyx_XGIVEREF(__pyx_t_6);
	__Pyx_XGIVEREF(__pyx_t_7);
	__Pyx_ExceptionReset(__pyx_t_5, __pyx_t_6, __pyx_t_7);
	__pyx_L10_try_end:;
  }

  /* "_browse.pyx":187
 *         print
 *         pass
 *     return 0             # <<<<<<<<<<<<<<
 * 
 * if __name__=='__main__':
 */
  __pyx_r = 0;
  goto __pyx_L0;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_WriteUnraisable("_browse.browseBuild", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_httpd);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7_browse_9browseBuild(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_7_browse_9browseBuild(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  char *__pyx_v_cmd;
  char *__pyx_v_location;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("browseBuild (wrapper)", 0);
  {
	static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__cmd,&__pyx_n_s__location,0};
	PyObject* values[2] = {0,0};
	if (unlikely(__pyx_kwds)) {
	  Py_ssize_t kw_args;
	  const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
	  switch (pos_args) {
		case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
		case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
		case  0: break;
		default: goto __pyx_L5_argtuple_error;
	  }
	  kw_args = PyDict_Size(__pyx_kwds);
	  switch (pos_args) {
		case  0:
		if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__cmd)) != 0)) kw_args--;
		else goto __pyx_L5_argtuple_error;
		case  1:
		if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__location)) != 0)) kw_args--;
		else {
		  __Pyx_RaiseArgtupleInvalid("browseBuild", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 174; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
		}
	  }
	  if (unlikely(kw_args > 0)) {
		if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "browseBuild") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 174; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
	  }
	} else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
	  goto __pyx_L5_argtuple_error;
	} else {
	  values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
	  values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
	}
	__pyx_v_cmd = PyBytes_AsString(values[0]); if (unlikely((!__pyx_v_cmd) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 174; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
	__pyx_v_location = PyBytes_AsString(values[1]); if (unlikely((!__pyx_v_location) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 174; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("browseBuild", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 174; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_browse.browseBuild", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7_browse_8browseBuild(__pyx_self, __pyx_v_cmd, __pyx_v_location);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_browse.pyx":174
 *         pass  # Swallow console spam.
 * 
 * cpdef public int browseBuild(char* cmd, char* location):             # <<<<<<<<<<<<<<
 *     cdef int port = 8000
 *     global locationStr, cmdStr
 */

static PyObject *__pyx_pf_7_browse_8browseBuild(CYTHON_UNUSED PyObject *__pyx_self, char *__pyx_v_cmd, char *__pyx_v_location) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("browseBuild", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(browseBuild(__pyx_v_cmd, __pyx_v_location, 0)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 174; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_browse.browseBuild", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyMethodDef __pyx_methods[] = {
  {__Pyx_NAMESTR("browseBuild"), (PyCFunction)__pyx_pw_7_browse_9browseBuild, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
	PyModuleDef_HEAD_INIT,
	__Pyx_NAMESTR("_browse"),
	__Pyx_DOCSTR(__pyx_k_28), /* m_doc */
	-1, /* m_size */
	__pyx_methods /* m_methods */,
	NULL, /* m_reload */
	NULL, /* m_traverse */
	NULL, /* m_clear */
	NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_s_1, __pyx_k_1, sizeof(__pyx_k_1), 0, 0, 1, 0},
  {&__pyx_kp_s_10, __pyx_k_10, sizeof(__pyx_k_10), 0, 0, 1, 0},
  {&__pyx_kp_s_11, __pyx_k_11, sizeof(__pyx_k_11), 0, 0, 1, 0},
  {&__pyx_kp_s_12, __pyx_k_12, sizeof(__pyx_k_12), 0, 0, 1, 0},
  {&__pyx_kp_s_13, __pyx_k_13, sizeof(__pyx_k_13), 0, 0, 1, 0},
  {&__pyx_kp_s_14, __pyx_k_14, sizeof(__pyx_k_14), 0, 0, 1, 0},
  {&__pyx_kp_s_15, __pyx_k_15, sizeof(__pyx_k_15), 0, 0, 1, 0},
  {&__pyx_kp_s_16, __pyx_k_16, sizeof(__pyx_k_16), 0, 0, 1, 0},
  {&__pyx_kp_s_17, __pyx_k_17, sizeof(__pyx_k_17), 0, 0, 1, 0},
  {&__pyx_kp_s_18, __pyx_k_18, sizeof(__pyx_k_18), 0, 0, 1, 0},
  {&__pyx_kp_s_19, __pyx_k_19, sizeof(__pyx_k_19), 0, 0, 1, 0},
  {&__pyx_kp_s_20, __pyx_k_20, sizeof(__pyx_k_20), 0, 0, 1, 0},
  {&__pyx_kp_s_22, __pyx_k_22, sizeof(__pyx_k_22), 0, 0, 1, 0},
  {&__pyx_kp_s_26, __pyx_k_26, sizeof(__pyx_k_26), 0, 0, 1, 0},
  {&__pyx_kp_s_27, __pyx_k_27, sizeof(__pyx_k_27), 0, 0, 1, 0},
  {&__pyx_kp_s_3, __pyx_k_3, sizeof(__pyx_k_3), 0, 0, 1, 0},
  {&__pyx_kp_s_31, __pyx_k_31, sizeof(__pyx_k_31), 0, 0, 1, 0},
  {&__pyx_kp_s_4, __pyx_k_4, sizeof(__pyx_k_4), 0, 0, 1, 0},
  {&__pyx_n_s_42, __pyx_k_42, sizeof(__pyx_k_42), 0, 0, 1, 1},
  {&__pyx_kp_s_5, __pyx_k_5, sizeof(__pyx_k_5), 0, 0, 1, 0},
  {&__pyx_kp_s_6, __pyx_k_6, sizeof(__pyx_k_6), 0, 0, 1, 0},
  {&__pyx_kp_s_7, __pyx_k_7, sizeof(__pyx_k_7), 0, 0, 1, 0},
  {&__pyx_kp_s_8, __pyx_k_8, sizeof(__pyx_k_8), 0, 0, 1, 0},
  {&__pyx_kp_s_9, __pyx_k_9, sizeof(__pyx_k_9), 0, 0, 1, 0},
  {&__pyx_n_s__BaseHTTPServer, __pyx_k__BaseHTTPServer, sizeof(__pyx_k__BaseHTTPServer), 0, 0, 1, 1},
  {&__pyx_n_s__HTTPServer, __pyx_k__HTTPServer, sizeof(__pyx_k__HTTPServer), 0, 0, 1, 1},
  {&__pyx_n_s__KeyboardInterrupt, __pyx_k__KeyboardInterrupt, sizeof(__pyx_k__KeyboardInterrupt), 0, 0, 1, 1},
  {&__pyx_n_s__Location, __pyx_k__Location, sizeof(__pyx_k__Location), 0, 0, 1, 1},
  {&__pyx_n_s__Node, __pyx_k__Node, sizeof(__pyx_k__Node), 0, 0, 1, 1},
  {&__pyx_n_s__PIPE, __pyx_k__PIPE, sizeof(__pyx_k__PIPE), 0, 0, 1, 1},
  {&__pyx_n_s__Popen, __pyx_k__Popen, sizeof(__pyx_k__Popen), 0, 0, 1, 1},
  {&__pyx_n_s__RequestHandler, __pyx_k__RequestHandler, sizeof(__pyx_k__RequestHandler), 0, 0, 1, 1},
  {&__pyx_n_s__StopIteration, __pyx_k__StopIteration, sizeof(__pyx_k__StopIteration), 0, 0, 1, 1},
  {&__pyx_n_s___, __pyx_k___, sizeof(__pyx_k___), 0, 0, 1, 1},
  {&__pyx_n_s____main__, __pyx_k____main__, sizeof(__pyx_k____main__), 0, 0, 1, 1},
  {&__pyx_n_s____name__, __pyx_k____name__, sizeof(__pyx_k____name__), 0, 0, 1, 1},
  {&__pyx_n_s____test__, __pyx_k____test__, sizeof(__pyx_k____test__), 0, 0, 1, 1},
  {&__pyx_n_s___browse, __pyx_k___browse, sizeof(__pyx_k___browse), 0, 0, 1, 1},
  {&__pyx_n_s__args, __pyx_k__args, sizeof(__pyx_k__args), 0, 0, 1, 1},
  {&__pyx_n_s__argv, __pyx_k__argv, sizeof(__pyx_k__argv), 0, 0, 1, 1},
  {&__pyx_n_s__cmd, __pyx_k__cmd, sizeof(__pyx_k__cmd), 0, 0, 1, 1},
  {&__pyx_n_s__collections, __pyx_k__collections, sizeof(__pyx_k__collections), 0, 0, 1, 1},
  {&__pyx_n_s__communicate, __pyx_k__communicate, sizeof(__pyx_k__communicate), 0, 0, 1, 1},
  {&__pyx_n_s__do_GET, __pyx_k__do_GET, sizeof(__pyx_k__do_GET), 0, 0, 1, 1},
  {&__pyx_n_s__end_headers, __pyx_k__end_headers, sizeof(__pyx_k__end_headers), 0, 0, 1, 1},
  {&__pyx_n_s__extra, __pyx_k__extra, sizeof(__pyx_k__extra), 0, 0, 1, 1},
  {&__pyx_n_s__format, __pyx_k__format, sizeof(__pyx_k__format), 0, 0, 1, 1},
  {&__pyx_n_s__generate_html, __pyx_k__generate_html, sizeof(__pyx_k__generate_html), 0, 0, 1, 1},
  {&__pyx_n_s__implicit, __pyx_k__implicit, sizeof(__pyx_k__implicit), 0, 0, 1, 1},
  {&__pyx_n_s__input, __pyx_k__input, sizeof(__pyx_k__input), 0, 0, 1, 1},
  {&__pyx_n_s__inputs, __pyx_k__inputs, sizeof(__pyx_k__inputs), 0, 0, 1, 1},
  {&__pyx_n_s__line, __pyx_k__line, sizeof(__pyx_k__line), 0, 0, 1, 1},
  {&__pyx_n_s__lines, __pyx_k__lines, sizeof(__pyx_k__lines), 0, 0, 1, 1},
  {&__pyx_n_s__location, __pyx_k__location, sizeof(__pyx_k__location), 0, 0, 1, 1},
  {&__pyx_n_s__log_message, __pyx_k__log_message, sizeof(__pyx_k__log_message), 0, 0, 1, 1},
  {&__pyx_n_s__match, __pyx_k__match, sizeof(__pyx_k__match), 0, 0, 1, 1},
  {&__pyx_n_s__match_strip, __pyx_k__match_strip, sizeof(__pyx_k__match_strip), 0, 0, 1, 1},
  {&__pyx_n_s__namedtuple, __pyx_k__namedtuple, sizeof(__pyx_k__namedtuple), 0, 0, 1, 1},
  {&__pyx_n_s__next, __pyx_k__next, sizeof(__pyx_k__next), 0, 0, 1, 1},
  {&__pyx_n_s__ninja_dump, __pyx_k__ninja_dump, sizeof(__pyx_k__ninja_dump), 0, 0, 1, 1},
  {&__pyx_n_s__node, __pyx_k__node, sizeof(__pyx_k__node), 0, 0, 1, 1},
  {&__pyx_n_s__open_new, __pyx_k__open_new, sizeof(__pyx_k__open_new), 0, 0, 1, 1},
  {&__pyx_n_s__output, __pyx_k__output, sizeof(__pyx_k__output), 0, 0, 1, 1},
  {&__pyx_n_s__outputs, __pyx_k__outputs, sizeof(__pyx_k__outputs), 0, 0, 1, 1},
  {&__pyx_n_s__parse, __pyx_k__parse, sizeof(__pyx_k__parse), 0, 0, 1, 1},
  {&__pyx_n_s__path, __pyx_k__path, sizeof(__pyx_k__path), 0, 0, 1, 1},
  {&__pyx_n_s__prefix, __pyx_k__prefix, sizeof(__pyx_k__prefix), 0, 0, 1, 1},
  {&__pyx_n_s__proc, __pyx_k__proc, sizeof(__pyx_k__proc), 0, 0, 1, 1},
  {&__pyx_n_s__query, __pyx_k__query, sizeof(__pyx_k__query), 0, 0, 1, 1},
  {&__pyx_n_s__rule, __pyx_k__rule, sizeof(__pyx_k__rule), 0, 0, 1, 1},
  {&__pyx_n_s__self, __pyx_k__self, sizeof(__pyx_k__self), 0, 0, 1, 1},
  {&__pyx_n_s__send_header, __pyx_k__send_header, sizeof(__pyx_k__send_header), 0, 0, 1, 1},
  {&__pyx_n_s__send_response, __pyx_k__send_response, sizeof(__pyx_k__send_response), 0, 0, 1, 1},
  {&__pyx_n_s__serve_forever, __pyx_k__serve_forever, sizeof(__pyx_k__serve_forever), 0, 0, 1, 1},
  {&__pyx_n_s__sorted, __pyx_k__sorted, sizeof(__pyx_k__sorted), 0, 0, 1, 1},
  {&__pyx_n_s__split, __pyx_k__split, sizeof(__pyx_k__split), 0, 0, 1, 1},
  {&__pyx_n_s__startswith, __pyx_k__startswith, sizeof(__pyx_k__startswith), 0, 0, 1, 1},
  {&__pyx_n_s__stdout, __pyx_k__stdout, sizeof(__pyx_k__stdout), 0, 0, 1, 1},
  {&__pyx_n_s__strip, __pyx_k__strip, sizeof(__pyx_k__strip), 0, 0, 1, 1},
  {&__pyx_n_s__subprocess, __pyx_k__subprocess, sizeof(__pyx_k__subprocess), 0, 0, 1, 1},
  {&__pyx_n_s__sys, __pyx_k__sys, sizeof(__pyx_k__sys), 0, 0, 1, 1},
  {&__pyx_n_s__target, __pyx_k__target, sizeof(__pyx_k__target), 0, 0, 1, 1},
  {&__pyx_n_s__text, __pyx_k__text, sizeof(__pyx_k__text), 0, 0, 1, 1},
  {&__pyx_n_s__type, __pyx_k__type, sizeof(__pyx_k__type), 0, 0, 1, 1},
  {&__pyx_n_s__webbrowser, __pyx_k__webbrowser, sizeof(__pyx_k__webbrowser), 0, 0, 1, 1},
  {&__pyx_n_s__wfile, __pyx_k__wfile, sizeof(__pyx_k__wfile), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_StopIteration = __Pyx_GetName(__pyx_b, __pyx_n_s__StopIteration); if (!__pyx_builtin_StopIteration) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 84; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_sorted = __Pyx_GetName(__pyx_b, __pyx_n_s__sorted); if (!__pyx_builtin_sorted) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 122; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_KeyboardInterrupt = __Pyx_GetName(__pyx_b, __pyx_n_s__KeyboardInterrupt); if (!__pyx_builtin_KeyboardInterrupt) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 184; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "_browse.pyx":53
 * 
 * def parse(text):
 *     lines = iter(text.split('\n'))             # <<<<<<<<<<<<<<
 * 
 *     target = None
 */
  __pyx_k_tuple_2 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 53; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_2);
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_1));
  PyTuple_SET_ITEM(__pyx_k_tuple_2, 0, ((PyObject *)__pyx_kp_s_1));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_1));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_2));

  /* "_browse.pyx":149
 * 
 *         if target == '':
 *             self.send_response(302)             # <<<<<<<<<<<<<<
 *             self.send_header('Location', '?' + locationStr)
 *             self.end_headers()
 */
  __pyx_k_tuple_21 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_21)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 149; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_21);
  __Pyx_INCREF(__pyx_int_302);
  PyTuple_SET_ITEM(__pyx_k_tuple_21, 0, __pyx_int_302);
  __Pyx_GIVEREF(__pyx_int_302);
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_21));

  /* "_browse.pyx":154
 *             return
 * 
 *         if not target.startswith('?'):             # <<<<<<<<<<<<<<
 *             self.send_response(404)
 *             self.end_headers()
 */
  __pyx_k_tuple_23 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_23)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 154; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_23);
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_22));
  PyTuple_SET_ITEM(__pyx_k_tuple_23, 0, ((PyObject *)__pyx_kp_s_22));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_22));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_23));

  /* "_browse.pyx":155
 * 
 *         if not target.startswith('?'):
 *             self.send_response(404)             # <<<<<<<<<<<<<<
 *             self.end_headers()
 *             return
 */
  __pyx_k_tuple_24 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_24)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_24);
  __Pyx_INCREF(__pyx_int_404);
  PyTuple_SET_ITEM(__pyx_k_tuple_24, 0, __pyx_int_404);
  __Pyx_GIVEREF(__pyx_int_404);
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_24));

  /* "_browse.pyx":162
 *         input = ninja_dump(target)
 * 
 *         self.send_response(200)             # <<<<<<<<<<<<<<
 *         self.end_headers()
 *         stdout = sys.stdout
 */
  __pyx_k_tuple_25 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_25)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 162; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_25);
  __Pyx_INCREF(__pyx_int_200);
  PyTuple_SET_ITEM(__pyx_k_tuple_25, 0, __pyx_int_200);
  __Pyx_GIVEREF(__pyx_int_200);
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_25));

  /* "_browse.pyx":47
 * # of an edge.  But I think it's less confusing than alternatives.
 * 
 * def match_strip(line, prefix):             # <<<<<<<<<<<<<<
 *     if not line.startswith(prefix):
 *         return (False, line)
 */
  __pyx_k_tuple_29 = PyTuple_New(2); if (unlikely(!__pyx_k_tuple_29)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 47; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_29);
  __Pyx_INCREF(((PyObject *)__pyx_n_s__line));
  PyTuple_SET_ITEM(__pyx_k_tuple_29, 0, ((PyObject *)__pyx_n_s__line));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__line));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__prefix));
  PyTuple_SET_ITEM(__pyx_k_tuple_29, 1, ((PyObject *)__pyx_n_s__prefix));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__prefix));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_29));
  __pyx_k_codeobj_30 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_29, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_31, __pyx_n_s__match_strip, 47, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_30)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 47; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_browse.pyx":52
 *     return (True, line[len(prefix):])
 * 
 * def parse(text):             # <<<<<<<<<<<<<<
 *     lines = iter(text.split('\n'))
 * 
 */
  __pyx_k_tuple_32 = PyTuple_New(10); if (unlikely(!__pyx_k_tuple_32)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_32);
  __Pyx_INCREF(((PyObject *)__pyx_n_s__text));
  PyTuple_SET_ITEM(__pyx_k_tuple_32, 0, ((PyObject *)__pyx_n_s__text));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__text));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__lines));
  PyTuple_SET_ITEM(__pyx_k_tuple_32, 1, ((PyObject *)__pyx_n_s__lines));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__lines));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__target));
  PyTuple_SET_ITEM(__pyx_k_tuple_32, 2, ((PyObject *)__pyx_n_s__target));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__target));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__rule));
  PyTuple_SET_ITEM(__pyx_k_tuple_32, 3, ((PyObject *)__pyx_n_s__rule));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__rule));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__inputs));
  PyTuple_SET_ITEM(__pyx_k_tuple_32, 4, ((PyObject *)__pyx_n_s__inputs));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__inputs));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__outputs));
  PyTuple_SET_ITEM(__pyx_k_tuple_32, 5, ((PyObject *)__pyx_n_s__outputs));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__outputs));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__line));
  PyTuple_SET_ITEM(__pyx_k_tuple_32, 6, ((PyObject *)__pyx_n_s__line));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__line));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__match));
  PyTuple_SET_ITEM(__pyx_k_tuple_32, 7, ((PyObject *)__pyx_n_s__match));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__match));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__type));
  PyTuple_SET_ITEM(__pyx_k_tuple_32, 8, ((PyObject *)__pyx_n_s__type));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__type));
  __Pyx_INCREF(((PyObject *)__pyx_n_s___));
  PyTuple_SET_ITEM(__pyx_k_tuple_32, 9, ((PyObject *)__pyx_n_s___));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s___));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_32));
  __pyx_k_codeobj_33 = (PyObject*)__Pyx_PyCode_New(1, 0, 10, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_32, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_31, __pyx_n_s__parse, 52, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_33)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_browse.pyx":89
 *     return Node(inputs, rule, target, outputs)
 * 
 * def generate_html(node):             # <<<<<<<<<<<<<<
 *     print '''<!DOCTYPE html>
 * <style>
 */
  __pyx_k_tuple_34 = PyTuple_New(5); if (unlikely(!__pyx_k_tuple_34)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_34);
  __Pyx_INCREF(((PyObject *)__pyx_n_s__node));
  PyTuple_SET_ITEM(__pyx_k_tuple_34, 0, ((PyObject *)__pyx_n_s__node));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__node));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__input));
  PyTuple_SET_ITEM(__pyx_k_tuple_34, 1, ((PyObject *)__pyx_n_s__input));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__input));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__type));
  PyTuple_SET_ITEM(__pyx_k_tuple_34, 2, ((PyObject *)__pyx_n_s__type));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__type));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__extra));
  PyTuple_SET_ITEM(__pyx_k_tuple_34, 3, ((PyObject *)__pyx_n_s__extra));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__extra));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__output));
  PyTuple_SET_ITEM(__pyx_k_tuple_34, 4, ((PyObject *)__pyx_n_s__output));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__output));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_34));
  __pyx_k_codeobj_35 = (PyObject*)__Pyx_PyCode_New(1, 0, 5, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_34, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_31, __pyx_n_s__generate_html, 89, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_35)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_browse.pyx":136
 *         print '</div>'
 * 
 * def ninja_dump(target):             # <<<<<<<<<<<<<<
 *     global cmdStr
 *     proc = subprocess.Popen([cmdStr, '-t', 'query', target],
 */
  __pyx_k_tuple_36 = PyTuple_New(2); if (unlikely(!__pyx_k_tuple_36)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 136; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_36);
  __Pyx_INCREF(((PyObject *)__pyx_n_s__target));
  PyTuple_SET_ITEM(__pyx_k_tuple_36, 0, ((PyObject *)__pyx_n_s__target));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__target));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__proc));
  PyTuple_SET_ITEM(__pyx_k_tuple_36, 1, ((PyObject *)__pyx_n_s__proc));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__proc));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_36));
  __pyx_k_codeobj_37 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_36, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_31, __pyx_n_s__ninja_dump, 136, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_37)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 136; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_browse.pyx":143
 * 
 * class RequestHandler(BaseHTTPServer.BaseHTTPRequestHandler):
 *     def do_GET(self):             # <<<<<<<<<<<<<<
 *         global locationStr
 *         assert self.path[0] == '/'
 */
  __pyx_k_tuple_38 = PyTuple_New(4); if (unlikely(!__pyx_k_tuple_38)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 143; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_38);
  __Pyx_INCREF(((PyObject *)__pyx_n_s__self));
  PyTuple_SET_ITEM(__pyx_k_tuple_38, 0, ((PyObject *)__pyx_n_s__self));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__self));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__target));
  PyTuple_SET_ITEM(__pyx_k_tuple_38, 1, ((PyObject *)__pyx_n_s__target));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__target));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__input));
  PyTuple_SET_ITEM(__pyx_k_tuple_38, 2, ((PyObject *)__pyx_n_s__input));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__input));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__stdout));
  PyTuple_SET_ITEM(__pyx_k_tuple_38, 3, ((PyObject *)__pyx_n_s__stdout));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__stdout));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_38));
  __pyx_k_codeobj_39 = (PyObject*)__Pyx_PyCode_New(1, 0, 4, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_38, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_31, __pyx_n_s__do_GET, 143, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_39)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 143; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_browse.pyx":171
 *             sys.stdout = stdout
 * 
 *     def log_message(self, format, *args):             # <<<<<<<<<<<<<<
 *         pass  # Swallow console spam.
 * 
 */
  __pyx_k_tuple_40 = PyTuple_New(4); if (unlikely(!__pyx_k_tuple_40)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 171; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_40);
  __Pyx_INCREF(((PyObject *)__pyx_n_s__self));
  PyTuple_SET_ITEM(__pyx_k_tuple_40, 0, ((PyObject *)__pyx_n_s__self));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__self));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__format));
  PyTuple_SET_ITEM(__pyx_k_tuple_40, 1, ((PyObject *)__pyx_n_s__format));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__format));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__args));
  PyTuple_SET_ITEM(__pyx_k_tuple_40, 2, ((PyObject *)__pyx_n_s__args));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__args));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__args));
  PyTuple_SET_ITEM(__pyx_k_tuple_40, 3, ((PyObject *)__pyx_n_s__args));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__args));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_40));
  __pyx_k_codeobj_41 = (PyObject*)__Pyx_PyCode_New(2, 0, 4, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_40, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_31, __pyx_n_s__log_message, 171, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_41)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 171; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_200 = PyInt_FromLong(200); if (unlikely(!__pyx_int_200)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_302 = PyInt_FromLong(302); if (unlikely(!__pyx_int_302)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_404 = PyInt_FromLong(404); if (unlikely(!__pyx_int_404)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC init_browse(void); /*proto*/
PyMODINIT_FUNC init_browse(void)
#else
PyMODINIT_FUNC PyInit__browse(void); /*proto*/
PyMODINIT_FUNC PyInit__browse(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  char *__pyx_t_5;
  char *__pyx_t_6;
  __Pyx_RefNannyDeclarations
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
	  PyErr_Clear();
	  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
	  if (!__Pyx_RefNanny)
		  Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit__browse(void)", 0);
  if ( __Pyx_check_binary_version() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #ifdef __Pyx_CyFunction_USED
  if (__Pyx_CyFunction_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4(__Pyx_NAMESTR("_browse"), __pyx_methods, __Pyx_DOCSTR(__pyx_k_28), 0, PYTHON_API_VERSION);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (!__pyx_m) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  #if PY_MAJOR_VERSION < 3
  Py_INCREF(__pyx_m);
  #endif
  __pyx_b = PyImport_AddModule(__Pyx_NAMESTR(__Pyx_BUILTIN_MODULE_NAME));
  if (!__pyx_b) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (__Pyx_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  /*--- Initialize various global constants etc. ---*/
  if (unlikely(__Pyx_InitGlobals() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_module_is_main__browse) {
	if (__Pyx_SetAttrString(__pyx_m, "__name__", __pyx_n_s____main__) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  }
  /*--- Builtin init code ---*/
  if (unlikely(__Pyx_InitCachedBuiltins() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Constants init code ---*/
  if (unlikely(__Pyx_InitCachedConstants() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Global init code ---*/
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  /*--- Type import code ---*/
  /*--- Variable import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/

  /* "_browse.pyx":24
 * """
 * 
 * import BaseHTTPServer             # <<<<<<<<<<<<<<
 * import subprocess
 * import sys
 */
  __pyx_t_1 = __Pyx_Import(((PyObject *)__pyx_n_s__BaseHTTPServer), 0, -1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__BaseHTTPServer, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_browse.pyx":25
 * 
 * import BaseHTTPServer
 * import subprocess             # <<<<<<<<<<<<<<
 * import sys
 * import webbrowser
 */
  __pyx_t_1 = __Pyx_Import(((PyObject *)__pyx_n_s__subprocess), 0, -1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 25; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__subprocess, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 25; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_browse.pyx":26
 * import BaseHTTPServer
 * import subprocess
 * import sys             # <<<<<<<<<<<<<<
 * import webbrowser
 * from collections import namedtuple
 */
  __pyx_t_1 = __Pyx_Import(((PyObject *)__pyx_n_s__sys), 0, -1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 26; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__sys, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 26; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_browse.pyx":27
 * import subprocess
 * import sys
 * import webbrowser             # <<<<<<<<<<<<<<
 * from collections import namedtuple
 * 
 */
  __pyx_t_1 = __Pyx_Import(((PyObject *)__pyx_n_s__webbrowser), 0, -1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 27; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__webbrowser, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 27; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_browse.pyx":28
 * import sys
 * import webbrowser
 * from collections import namedtuple             # <<<<<<<<<<<<<<
 * 
 * cpdef char* locationStr = ''
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 28; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_n_s__namedtuple));
  PyList_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_n_s__namedtuple));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__namedtuple));
  __pyx_t_2 = __Pyx_Import(((PyObject *)__pyx_n_s__collections), ((PyObject *)__pyx_t_1), -1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 28; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__namedtuple);
  if (__pyx_t_1 == NULL) {
	if (PyErr_ExceptionMatches(PyExc_AttributeError)) __Pyx_RaiseImportError(__pyx_n_s__namedtuple);
	if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 28; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__namedtuple, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 28; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "_browse.pyx":30
 * from collections import namedtuple
 * 
 * cpdef char* locationStr = ''             # <<<<<<<<<<<<<<
 * cpdef char* cmdStr = ''
 * Node = namedtuple('Node', ['inputs', 'rule', 'target', 'outputs'])
 */
  __pyx_v_7_browse_locationStr = __pyx_k_13;

  /* "_browse.pyx":31
 * 
 * cpdef char* locationStr = ''
 * cpdef char* cmdStr = ''             # <<<<<<<<<<<<<<
 * Node = namedtuple('Node', ['inputs', 'rule', 'target', 'outputs'])
 * 
 */
  __pyx_v_7_browse_cmdStr = __pyx_k_13;

  /* "_browse.pyx":32
 * cpdef char* locationStr = ''
 * cpdef char* cmdStr = ''
 * Node = namedtuple('Node', ['inputs', 'rule', 'target', 'outputs'])             # <<<<<<<<<<<<<<
 * 
 * # Ideally we'd allow you to navigate to a build edge or a build node,
 */
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__namedtuple); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyList_New(4); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_n_s__inputs));
  PyList_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_n_s__inputs));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__inputs));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__rule));
  PyList_SET_ITEM(__pyx_t_1, 1, ((PyObject *)__pyx_n_s__rule));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__rule));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__target));
  PyList_SET_ITEM(__pyx_t_1, 2, ((PyObject *)__pyx_n_s__target));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__target));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__outputs));
  PyList_SET_ITEM(__pyx_t_1, 3, ((PyObject *)__pyx_n_s__outputs));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__outputs));
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(((PyObject *)__pyx_n_s__Node));
  PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_n_s__Node));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__Node));
  PyTuple_SET_ITEM(__pyx_t_3, 1, ((PyObject *)__pyx_t_1));
  __Pyx_GIVEREF(((PyObject *)__pyx_t_1));
  __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__Node, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_browse.pyx":47
 * # of an edge.  But I think it's less confusing than alternatives.
 * 
 * def match_strip(line, prefix):             # <<<<<<<<<<<<<<
 *     if not line.startswith(prefix):
 *         return (False, line)
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7_browse_1match_strip, NULL, __pyx_n_s___browse); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 47; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__match_strip, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 47; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_browse.pyx":52
 *     return (True, line[len(prefix):])
 * 
 * def parse(text):             # <<<<<<<<<<<<<<
 *     lines = iter(text.split('\n'))
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7_browse_3parse, NULL, __pyx_n_s___browse); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__parse, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_browse.pyx":89
 *     return Node(inputs, rule, target, outputs)
 * 
 * def generate_html(node):             # <<<<<<<<<<<<<<
 *     print '''<!DOCTYPE html>
 * <style>
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7_browse_5generate_html, NULL, __pyx_n_s___browse); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__generate_html, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_browse.pyx":136
 *         print '</div>'
 * 
 * def ninja_dump(target):             # <<<<<<<<<<<<<<
 *     global cmdStr
 *     proc = subprocess.Popen([cmdStr, '-t', 'query', target],
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7_browse_7ninja_dump, NULL, __pyx_n_s___browse); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 136; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__ninja_dump, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 136; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_browse.pyx":142
 *     return proc.communicate()[0]
 * 
 * class RequestHandler(BaseHTTPServer.BaseHTTPRequestHandler):             # <<<<<<<<<<<<<<
 *     def do_GET(self):
 *         global locationStr
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));

  /* "_browse.pyx":143
 * 
 * class RequestHandler(BaseHTTPServer.BaseHTTPRequestHandler):
 *     def do_GET(self):             # <<<<<<<<<<<<<<
 *         global locationStr
 *         assert self.path[0] == '/'
 */
  __pyx_t_3 = __Pyx_CyFunction_NewEx(&__pyx_mdef_7_browse_14RequestHandler_1do_GET, 0, NULL, __pyx_n_s___browse, ((PyObject *)__pyx_k_codeobj_39)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 143; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s__do_GET, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 143; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "_browse.pyx":171
 *             sys.stdout = stdout
 * 
 *     def log_message(self, format, *args):             # <<<<<<<<<<<<<<
 *         pass  # Swallow console spam.
 * 
 */
  __pyx_t_3 = __Pyx_CyFunction_NewEx(&__pyx_mdef_7_browse_14RequestHandler_3log_message, 0, NULL, __pyx_n_s___browse, ((PyObject *)__pyx_k_codeobj_41)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 171; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s__log_message, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 171; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "_browse.pyx":142
 *     return proc.communicate()[0]
 * 
 * class RequestHandler(BaseHTTPServer.BaseHTTPRequestHandler):             # <<<<<<<<<<<<<<
 *     def do_GET(self):
 *         global locationStr
 */
  __pyx_t_3 = __Pyx_GetName(__pyx_m, __pyx_n_s__BaseHTTPServer); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_3, __pyx_n_s_42); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_CreateClass(((PyObject *)__pyx_t_3), ((PyObject *)__pyx_t_1), __pyx_n_s__RequestHandler, __pyx_n_s___browse); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__RequestHandler, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

  /* "_browse.pyx":189
 *     return 0
 * 
 * if __name__=='__main__':             # <<<<<<<<<<<<<<
 *     browseBuild(sys.argv[1], sys.argv[2])
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s____name__); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 189; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyString_Equals(__pyx_t_1, ((PyObject *)__pyx_n_s____main__), Py_EQ); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 189; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_4) {

	/* "_browse.pyx":190
 * 
 * if __name__=='__main__':
 *     browseBuild(sys.argv[1], sys.argv[2])             # <<<<<<<<<<<<<<
 */
	__pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__sys); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 190; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
	__Pyx_GOTREF(__pyx_t_1);
	__pyx_t_2 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__argv); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 190; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
	__Pyx_GOTREF(__pyx_t_2);
	__Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
	__pyx_t_1 = __Pyx_GetItemInt(__pyx_t_2, 1, sizeof(long), PyInt_FromLong); if (!__pyx_t_1) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 190; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
	__Pyx_GOTREF(__pyx_t_1);
	__Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
	__pyx_t_5 = PyBytes_AsString(__pyx_t_1); if (unlikely((!__pyx_t_5) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 190; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
	__Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
	__pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__sys); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 190; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
	__Pyx_GOTREF(__pyx_t_1);
	__pyx_t_2 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__argv); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 190; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
	__Pyx_GOTREF(__pyx_t_2);
	__Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
	__pyx_t_1 = __Pyx_GetItemInt(__pyx_t_2, 2, sizeof(long), PyInt_FromLong); if (!__pyx_t_1) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 190; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
	__Pyx_GOTREF(__pyx_t_1);
	__Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
	__pyx_t_6 = PyBytes_AsString(__pyx_t_1); if (unlikely((!__pyx_t_6) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 190; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
	__Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
	browseBuild(__pyx_t_5, __pyx_t_6, 0);
	goto __pyx_L2;
  }
  __pyx_L2:;

  /* "_browse.pyx":1
 * #!/usr/bin/env cython             # <<<<<<<<<<<<<<
 * #
 * # Copyright 2001 Google Inc. All Rights Reserved.
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s____test__, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  if (__pyx_m) {
	__Pyx_AddTraceback("init _browse", __pyx_clineno, __pyx_lineno, __pyx_filename);
	Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
	PyErr_SetString(PyExc_ImportError, "init _browse");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

/* Runtime support code */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
	PyObject *m = NULL, *p = NULL;
	void *r = NULL;
	m = PyImport_ImportModule((char *)modname);
	if (!m) goto end;
	p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
	if (!p) goto end;
	r = PyLong_AsVoidPtr(p);
end:
	Py_XDECREF(p);
	Py_XDECREF(m);
	return (__Pyx_RefNannyAPIStruct *)r;
}
#endif /* CYTHON_REFNANNY */

static PyObject *__Pyx_GetName(PyObject *dict, PyObject *name) {
	PyObject *result;
	result = PyObject_GetAttr(dict, name);
	if (!result) {
		if (dict != __pyx_b) {
			PyErr_Clear();
			result = PyObject_GetAttr(__pyx_b, name);
		}
		if (!result) {
			PyErr_SetObject(PyExc_NameError, name);
		}
	}
	return result;
}

static void __Pyx_RaiseArgtupleInvalid(
	const char* func_name,
	int exact,
	Py_ssize_t num_min,
	Py_ssize_t num_max,
	Py_ssize_t num_found)
{
	Py_ssize_t num_expected;
	const char *more_or_less;
	if (num_found < num_min) {
		num_expected = num_min;
		more_or_less = "at least";
	} else {
		num_expected = num_max;
		more_or_less = "at most";
	}
	if (exact) {
		more_or_less = "exactly";
	}
	PyErr_Format(PyExc_TypeError,
				 "%s() takes %s %" PY_FORMAT_SIZE_T "d positional argument%s (%" PY_FORMAT_SIZE_T "d given)",
				 func_name, more_or_less, num_expected,
				 (num_expected == 1) ? "" : "s", num_found);
}

static void __Pyx_RaiseDoubleKeywordsError(
	const char* func_name,
	PyObject* kw_name)
{
	PyErr_Format(PyExc_TypeError,
		#if PY_MAJOR_VERSION >= 3
		"%s() got multiple values for keyword argument '%U'", func_name, kw_name);
		#else
		"%s() got multiple values for keyword argument '%s'", func_name,
		PyString_AS_STRING(kw_name));
		#endif
}

static int __Pyx_ParseOptionalKeywords(
	PyObject *kwds,
	PyObject **argnames[],
	PyObject *kwds2,
	PyObject *values[],
	Py_ssize_t num_pos_args,
	const char* function_name)
{
	PyObject *key = 0, *value = 0;
	Py_ssize_t pos = 0;
	PyObject*** name;
	PyObject*** first_kw_arg = argnames + num_pos_args;
	while (PyDict_Next(kwds, &pos, &key, &value)) {
		name = first_kw_arg;
		while (*name && (**name != key)) name++;
		if (*name) {
			values[name-argnames] = value;
		} else {
			#if PY_MAJOR_VERSION < 3
			if (unlikely(!PyString_CheckExact(key)) && unlikely(!PyString_Check(key))) {
			#else
			if (unlikely(!PyUnicode_Check(key))) {
			#endif
				goto invalid_keyword_type;
			} else {
				for (name = first_kw_arg; *name; name++) {
					#if PY_MAJOR_VERSION >= 3
					if (PyUnicode_GET_SIZE(**name) == PyUnicode_GET_SIZE(key) &&
						PyUnicode_Compare(**name, key) == 0) break;
					#else
					if (PyString_GET_SIZE(**name) == PyString_GET_SIZE(key) &&
						_PyString_Eq(**name, key)) break;
					#endif
				}
				if (*name) {
					values[name-argnames] = value;
				} else {
					for (name=argnames; name != first_kw_arg; name++) {
						if (**name == key) goto arg_passed_twice;
						#if PY_MAJOR_VERSION >= 3
						if (PyUnicode_GET_SIZE(**name) == PyUnicode_GET_SIZE(key) &&
							PyUnicode_Compare(**name, key) == 0) goto arg_passed_twice;
						#else
						if (PyString_GET_SIZE(**name) == PyString_GET_SIZE(key) &&
							_PyString_Eq(**name, key)) goto arg_passed_twice;
						#endif
					}
					if (kwds2) {
						if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
					} else {
						goto invalid_keyword;
					}
				}
			}
		}
	}
	return 0;
arg_passed_twice:
	__Pyx_RaiseDoubleKeywordsError(function_name, **name);
	goto bad;
invalid_keyword_type:
	PyErr_Format(PyExc_TypeError,
		"%s() keywords must be strings", function_name);
	goto bad;
invalid_keyword:
	PyErr_Format(PyExc_TypeError,
	#if PY_MAJOR_VERSION < 3
		"%s() got an unexpected keyword argument '%s'",
		function_name, PyString_AsString(key));
	#else
		"%s() got an unexpected keyword argument '%U'",
		function_name, key);
	#endif
bad:
	return -1;
}

static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
	PyErr_Format(PyExc_ValueError,
				 "too many values to unpack (expected %" PY_FORMAT_SIZE_T "d)", expected);
}

static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
	PyErr_Format(PyExc_ValueError,
				 "need more than %" PY_FORMAT_SIZE_T "d value%s to unpack",
				 index, (index == 1) ? "" : "s");
}

static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_COMPILING_IN_CPYTHON
	PyThreadState *tstate = PyThreadState_GET();
	PyObject* exc_type = tstate->curexc_type;
	if (unlikely(exc_type)) {
		if (likely(exc_type == PyExc_StopIteration) || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)) {
			PyObject *exc_value, *exc_tb;
			exc_value = tstate->curexc_value;
			exc_tb = tstate->curexc_traceback;
			tstate->curexc_type = 0;
			tstate->curexc_value = 0;
			tstate->curexc_traceback = 0;
			Py_DECREF(exc_type);
			Py_XDECREF(exc_value);
			Py_XDECREF(exc_tb);
			return 0;
		} else {
			return -1;
		}
	}
	return 0;
#else
	if (unlikely(PyErr_Occurred())) {
		if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
			PyErr_Clear();
			return 0;
		} else {
			return -1;
		}
	}
	return 0;
#endif
}

static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
	if (unlikely(retval)) {
		Py_DECREF(retval);
		__Pyx_RaiseTooManyValuesError(expected);
		return -1;
	} else {
		return __Pyx_IterFinish();
	}
	return 0;
}

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb) {
#if CYTHON_COMPILING_IN_CPYTHON
	PyObject *tmp_type, *tmp_value, *tmp_tb;
	PyThreadState *tstate = PyThreadState_GET();
	tmp_type = tstate->curexc_type;
	tmp_value = tstate->curexc_value;
	tmp_tb = tstate->curexc_traceback;
	tstate->curexc_type = type;
	tstate->curexc_value = value;
	tstate->curexc_traceback = tb;
	Py_XDECREF(tmp_type);
	Py_XDECREF(tmp_value);
	Py_XDECREF(tmp_tb);
#else
	PyErr_Restore(type, value, tb);
#endif
}
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb) {
#if CYTHON_COMPILING_IN_CPYTHON
	PyThreadState *tstate = PyThreadState_GET();
	*type = tstate->curexc_type;
	*value = tstate->curexc_value;
	*tb = tstate->curexc_traceback;
	tstate->curexc_type = 0;
	tstate->curexc_value = 0;
	tstate->curexc_traceback = 0;
#else
	PyErr_Fetch(type, value, tb);
#endif
}

static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb) {
	PyObject *local_type, *local_value, *local_tb;
#if CYTHON_COMPILING_IN_CPYTHON
	PyObject *tmp_type, *tmp_value, *tmp_tb;
	PyThreadState *tstate = PyThreadState_GET();
	local_type = tstate->curexc_type;
	local_value = tstate->curexc_value;
	local_tb = tstate->curexc_traceback;
	tstate->curexc_type = 0;
	tstate->curexc_value = 0;
	tstate->curexc_traceback = 0;
#else
	PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
	PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_COMPILING_IN_CPYTHON
	if (unlikely(tstate->curexc_type))
#else
	if (unlikely(PyErr_Occurred()))
#endif
		goto bad;
	#if PY_MAJOR_VERSION >= 3
	if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
		goto bad;
	#endif
	Py_INCREF(local_type);
	Py_INCREF(local_value);
	Py_INCREF(local_tb);
	*type = local_type;
	*value = local_value;
	*tb = local_tb;
#if CYTHON_COMPILING_IN_CPYTHON
	tmp_type = tstate->exc_type;
	tmp_value = tstate->exc_value;
	tmp_tb = tstate->exc_traceback;
	tstate->exc_type = local_type;
	tstate->exc_value = local_value;
	tstate->exc_traceback = local_tb;
	/* Make sure tstate is in a consistent state when we XDECREF
	   these objects (DECREF may run arbitrary code). */
	Py_XDECREF(tmp_type);
	Py_XDECREF(tmp_value);
	Py_XDECREF(tmp_tb);
#else
	PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
	return 0;
bad:
	*type = 0;
	*value = 0;
	*tb = 0;
	Py_XDECREF(local_type);
	Py_XDECREF(local_value);
	Py_XDECREF(local_tb);
	return -1;
}


#if PY_MAJOR_VERSION < 3
int main(int argc, char** argv) {
#elif defined(WIN32) || defined(MS_WINDOWS)
int wmain(int argc, wchar_t **argv) {
#else
static int __Pyx_main(int argc, wchar_t **argv) {
#endif
	/* 754 requires that FP exceptions run in "no stop" mode by default,
	 * and until C vendors implement C99's ways to control FP exceptions,
	 * Python requires non-stop mode.  Alas, some platforms enable FP
	 * exceptions by default.  Here we disable them.
	 */
#ifdef __FreeBSD__
	fp_except_t m;
	m = fpgetmask();
	fpsetmask(m & ~FP_X_OFL);
#endif
	if (argc && argv)
		Py_SetProgramName(argv[0]);
	Py_Initialize();
	if (argc && argv)
		PySys_SetArgv(argc, argv);
	{ /* init module '_browse' as '__main__' */
	  PyObject* m = NULL;
	  __pyx_module_is_main__browse = 1;
	  #if PY_MAJOR_VERSION < 3
		  init_browse();
	  #else
		  m = PyInit__browse();
	  #endif
	  if (PyErr_Occurred()) {
		  PyErr_Print(); /* This exits with the right code if SystemExit. */
		  #if PY_MAJOR_VERSION < 3
		  if (Py_FlushLine()) PyErr_Clear();
		  #endif
		  return 1;
	  }
	  Py_XDECREF(m);
	}
	Py_Finalize();
	return 0;
}
static CYTHON_INLINE void __Pyx_ExceptionSave(PyObject **type, PyObject **value, PyObject **tb) {
	PyThreadState *tstate = PyThreadState_GET();
	*type = tstate->exc_type;
	*value = tstate->exc_value;
	*tb = tstate->exc_traceback;
	Py_XINCREF(*type);
	Py_XINCREF(*value);
	Py_XINCREF(*tb);
}
static void __Pyx_ExceptionReset(PyObject *type, PyObject *value, PyObject *tb) {
	PyObject *tmp_type, *tmp_value, *tmp_tb;
	PyThreadState *tstate = PyThreadState_GET();
	tmp_type = tstate->exc_type;
	tmp_value = tstate->exc_value;
	tmp_tb = tstate->exc_traceback;
	tstate->exc_type = type;
	tstate->exc_value = value;
	tstate->exc_traceback = tb;
	Py_XDECREF(tmp_type);
	Py_XDECREF(tmp_value);
	Py_XDECREF(tmp_tb);
}

static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, long level) {
	PyObject *py_import = 0;
	PyObject *empty_list = 0;
	PyObject *module = 0;
	PyObject *global_dict = 0;
	PyObject *empty_dict = 0;
	PyObject *list;
	py_import = __Pyx_GetAttrString(__pyx_b, "__import__");
	if (!py_import)
		goto bad;
	if (from_list)
		list = from_list;
	else {
		empty_list = PyList_New(0);
		if (!empty_list)
			goto bad;
		list = empty_list;
	}
	global_dict = PyModule_GetDict(__pyx_m);
	if (!global_dict)
		goto bad;
	empty_dict = PyDict_New();
	if (!empty_dict)
		goto bad;
	#if PY_VERSION_HEX >= 0x02050000
	{
		if (!module) {
			PyObject *py_level = PyInt_FromLong(level);
			if (!py_level)
				goto bad;
			module = PyObject_CallFunctionObjArgs(py_import,
				name, global_dict, empty_dict, list, py_level, NULL);
			Py_DECREF(py_level);
		}
	}
	#else
	if (level>0) {
		PyErr_SetString(PyExc_RuntimeError, "Relative import is not supported for Python <=2.4.");
		goto bad;
	}
	module = PyObject_CallFunctionObjArgs(py_import,
		name, global_dict, empty_dict, list, NULL);
	#endif
bad:
	Py_XDECREF(empty_list);
	Py_XDECREF(py_import);
	Py_XDECREF(empty_dict);
	return module;
}

static CYTHON_INLINE void __Pyx_RaiseImportError(PyObject *name) {
	PyErr_Format(PyExc_ImportError, "cannot import name %.230s",
				 PyString_AsString(name));
}

static PyObject *__Pyx_FindPy2Metaclass(PyObject *bases) {
	PyObject *metaclass;
	if (PyTuple_Check(bases) && PyTuple_GET_SIZE(bases) > 0) {
		PyObject *base = PyTuple_GET_ITEM(bases, 0);
		metaclass = PyObject_GetAttrString(base, (char *)"__class__");
		if (!metaclass) {
			PyErr_Clear();
			metaclass = (PyObject*) Py_TYPE(base);
		}
	} else {
		metaclass = (PyObject *) &PyClass_Type;
	}
	Py_INCREF(metaclass);
	return metaclass;
}

static PyObject *__Pyx_CreateClass(PyObject *bases, PyObject *dict, PyObject *name,
								   PyObject *modname) {
	PyObject *result;
	PyObject *metaclass;
	if (PyDict_SetItemString(dict, "__module__", modname) < 0)
		return NULL;
	metaclass = PyDict_GetItemString(dict, "__metaclass__");
	if (metaclass) {
		Py_INCREF(metaclass);
	} else {
		metaclass = __Pyx_FindPy2Metaclass(bases);
	}
	result = PyObject_CallFunctionObjArgs(metaclass, name, bases, dict, NULL);
	Py_DECREF(metaclass);
	return result;
}

static PyObject *
__Pyx_CyFunction_get_doc(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *closure)
{
	if (op->func_doc == NULL && op->func.m_ml->ml_doc) {
		op->func_doc = PyString_FromString(op->func.m_ml->ml_doc);
	}
	if (op->func_doc == 0) {
		Py_INCREF(Py_None);
		return Py_None;
	}
	Py_INCREF(op->func_doc);
	return op->func_doc;
}
static int
__Pyx_CyFunction_set_doc(__pyx_CyFunctionObject *op, PyObject *value)
{
	PyObject *tmp = op->func_doc;
	if (value == NULL)
		op->func_doc = Py_None; /* Mark as deleted */
	else
		op->func_doc = value;
	Py_INCREF(op->func_doc);
	Py_XDECREF(tmp);
	return 0;
}
static PyObject *
__Pyx_CyFunction_get_name(__pyx_CyFunctionObject *op)
{
	if (op->func_name == NULL) {
		op->func_name = PyString_InternFromString(op->func.m_ml->ml_name);
	}
	Py_INCREF(op->func_name);
	return op->func_name;
}
static int
__Pyx_CyFunction_set_name(__pyx_CyFunctionObject *op, PyObject *value)
{
	PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
	if (value == NULL || !PyUnicode_Check(value)) {
#else
	if (value == NULL || !PyString_Check(value)) {
#endif
		PyErr_SetString(PyExc_TypeError,
						"__name__ must be set to a string object");
		return -1;
	}
	tmp = op->func_name;
	Py_INCREF(value);
	op->func_name = value;
	Py_XDECREF(tmp);
	return 0;
}
static PyObject *
__Pyx_CyFunction_get_self(__pyx_CyFunctionObject *m, CYTHON_UNUSED void *closure)
{
	PyObject *self;
	self = m->func_closure;
	if (self == NULL)
		self = Py_None;
	Py_INCREF(self);
	return self;
}
static PyObject *
__Pyx_CyFunction_get_dict(__pyx_CyFunctionObject *op)
{
	if (op->func_dict == NULL) {
		op->func_dict = PyDict_New();
		if (op->func_dict == NULL)
			return NULL;
	}
	Py_INCREF(op->func_dict);
	return op->func_dict;
}
static int
__Pyx_CyFunction_set_dict(__pyx_CyFunctionObject *op, PyObject *value)
{
	PyObject *tmp;
	if (value == NULL) {
		PyErr_SetString(PyExc_TypeError,
			   "function's dictionary may not be deleted");
		return -1;
	}
	if (!PyDict_Check(value)) {
		PyErr_SetString(PyExc_TypeError,
			   "setting function's dictionary to a non-dict");
		return -1;
	}
	tmp = op->func_dict;
	Py_INCREF(value);
	op->func_dict = value;
	Py_XDECREF(tmp);
	return 0;
}
static PyObject *
__Pyx_CyFunction_get_globals(CYTHON_UNUSED __pyx_CyFunctionObject *op)
{
	PyObject* dict = PyModule_GetDict(__pyx_m);
	Py_XINCREF(dict);
	return dict;
}
static PyObject *
__Pyx_CyFunction_get_closure(CYTHON_UNUSED __pyx_CyFunctionObject *op)
{
	Py_INCREF(Py_None);
	return Py_None;
}
static PyObject *
__Pyx_CyFunction_get_code(__pyx_CyFunctionObject *op)
{
	PyObject* result = (op->func_code) ? op->func_code : Py_None;
	Py_INCREF(result);
	return result;
}
static PyObject *
__Pyx_CyFunction_get_defaults(__pyx_CyFunctionObject *op)
{
	if (op->defaults_tuple) {
		Py_INCREF(op->defaults_tuple);
		return op->defaults_tuple;
	}
	if (op->defaults_getter) {
		PyObject *res = op->defaults_getter((PyObject *) op);
		if (res) {
			Py_INCREF(res);
			op->defaults_tuple = res;
		}
		return res;
	}
	Py_INCREF(Py_None);
	return Py_None;
}
static PyGetSetDef __pyx_CyFunction_getsets[] = {
	{(char *) "func_doc", (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
	{(char *) "__doc__",  (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
	{(char *) "func_name", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
	{(char *) "__name__", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
	{(char *) "__self__", (getter)__Pyx_CyFunction_get_self, 0, 0, 0},
	{(char *) "func_dict", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
	{(char *) "__dict__", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
	{(char *) "func_globals", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
	{(char *) "__globals__", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
	{(char *) "func_closure", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
	{(char *) "__closure__", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
	{(char *) "func_code", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
	{(char *) "__code__", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
	{(char *) "func_defaults", (getter)__Pyx_CyFunction_get_defaults, 0, 0, 0},
	{(char *) "__defaults__", (getter)__Pyx_CyFunction_get_defaults, 0, 0, 0},
	{0, 0, 0, 0, 0}
};
#ifndef PY_WRITE_RESTRICTED /* < Py2.5 */
#define PY_WRITE_RESTRICTED WRITE_RESTRICTED
#endif
static PyMemberDef __pyx_CyFunction_members[] = {
	{(char *) "__module__", T_OBJECT, offsetof(__pyx_CyFunctionObject, func.m_module), PY_WRITE_RESTRICTED, 0},
	{0, 0, 0,  0, 0}
};
static PyObject *
__Pyx_CyFunction_reduce(__pyx_CyFunctionObject *m, CYTHON_UNUSED PyObject *args)
{
#if PY_MAJOR_VERSION >= 3
	return PyUnicode_FromString(m->func.m_ml->ml_name);
#else
	return PyString_FromString(m->func.m_ml->ml_name);
#endif
}
static PyMethodDef __pyx_CyFunction_methods[] = {
	{__Pyx_NAMESTR("__reduce__"), (PyCFunction)__Pyx_CyFunction_reduce, METH_VARARGS, 0},
	{0, 0, 0, 0}
};
static PyObject *__Pyx_CyFunction_New(PyTypeObject *type, PyMethodDef *ml, int flags,
									  PyObject *closure, PyObject *module, PyObject* code) {
	__pyx_CyFunctionObject *op = PyObject_GC_New(__pyx_CyFunctionObject, type);
	if (op == NULL)
		return NULL;
	op->flags = flags;
	op->func_weakreflist = NULL;
	op->func.m_ml = ml;
	op->func.m_self = (PyObject *) op;
	Py_XINCREF(closure);
	op->func_closure = closure;
	Py_XINCREF(module);
	op->func.m_module = module;
	op->func_dict = NULL;
	op->func_name = NULL;
	op->func_doc = NULL;
	op->func_classobj = NULL;
	Py_XINCREF(code);
	op->func_code = code;
	op->defaults_pyobjects = 0;
	op->defaults = NULL;
	op->defaults_tuple = NULL;
	op->defaults_getter = NULL;
	PyObject_GC_Track(op);
	return (PyObject *) op;
}
static int
__Pyx_CyFunction_clear(__pyx_CyFunctionObject *m)
{
	Py_CLEAR(m->func_closure);
	Py_CLEAR(m->func.m_module);
	Py_CLEAR(m->func_dict);
	Py_CLEAR(m->func_name);
	Py_CLEAR(m->func_doc);
	Py_CLEAR(m->func_code);
	Py_CLEAR(m->func_classobj);
	Py_CLEAR(m->defaults_tuple);
	if (m->defaults) {
		PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
		int i;
		for (i = 0; i < m->defaults_pyobjects; i++)
			Py_XDECREF(pydefaults[i]);
		PyMem_Free(m->defaults);
		m->defaults = NULL;
	}
	return 0;
}
static void __Pyx_CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
	PyObject_GC_UnTrack(m);
	if (m->func_weakreflist != NULL)
		PyObject_ClearWeakRefs((PyObject *) m);
	__Pyx_CyFunction_clear(m);
	PyObject_GC_Del(m);
}
static int __Pyx_CyFunction_traverse(__pyx_CyFunctionObject *m, visitproc visit, void *arg)
{
	Py_VISIT(m->func_closure);
	Py_VISIT(m->func.m_module);
	Py_VISIT(m->func_dict);
	Py_VISIT(m->func_name);
	Py_VISIT(m->func_doc);
	Py_VISIT(m->func_code);
	Py_VISIT(m->func_classobj);
	Py_VISIT(m->defaults_tuple);
	if (m->defaults) {
		PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
		int i;
		for (i = 0; i < m->defaults_pyobjects; i++)
			Py_VISIT(pydefaults[i]);
	}
	return 0;
}
static PyObject *__Pyx_CyFunction_descr_get(PyObject *func, PyObject *obj, PyObject *type)
{
	__pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
	if (m->flags & __Pyx_CYFUNCTION_STATICMETHOD) {
		Py_INCREF(func);
		return func;
	}
	if (m->flags & __Pyx_CYFUNCTION_CLASSMETHOD) {
		if (type == NULL)
			type = (PyObject *)(Py_TYPE(obj));
		return PyMethod_New(func,
							type, (PyObject *)(Py_TYPE(type)));
	}
	if (obj == Py_None)
		obj = NULL;
	return PyMethod_New(func, obj, type);
}
static PyObject*
__Pyx_CyFunction_repr(__pyx_CyFunctionObject *op)
{
	PyObject *func_name = __Pyx_CyFunction_get_name(op);
#if PY_MAJOR_VERSION >= 3
	return PyUnicode_FromFormat("<cyfunction %U at %p>",
								func_name, (void *)op);
#else
	return PyString_FromFormat("<cyfunction %s at %p>",
							   PyString_AsString(func_name), (void *)op);
#endif
}
#if CYTHON_COMPILING_IN_PYPY
static PyObject * __Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
	PyCFunctionObject* f = (PyCFunctionObject*)func;
	PyCFunction meth = PyCFunction_GET_FUNCTION(func);
	PyObject *self = PyCFunction_GET_SELF(func);
	Py_ssize_t size;
	switch (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST)) {
	case METH_VARARGS:
		if (likely(kw == NULL) || PyDict_Size(kw) == 0)
			return (*meth)(self, arg);
		break;
	case METH_VARARGS | METH_KEYWORDS:
		return (*(PyCFunctionWithKeywords)meth)(self, arg, kw);
	case METH_NOARGS:
		if (likely(kw == NULL) || PyDict_Size(kw) == 0) {
			size = PyTuple_GET_SIZE(arg);
			if (size == 0)
				return (*meth)(self, NULL);
			PyErr_Format(PyExc_TypeError,
				"%.200s() takes no arguments (%zd given)",
				f->m_ml->ml_name, size);
			return NULL;
		}
		break;
	case METH_O:
		if (likely(kw == NULL) || PyDict_Size(kw) == 0) {
			size = PyTuple_GET_SIZE(arg);
			if (size == 1)
				return (*meth)(self, PyTuple_GET_ITEM(arg, 0));
			PyErr_Format(PyExc_TypeError,
				"%.200s() takes exactly one argument (%zd given)",
				f->m_ml->ml_name, size);
			return NULL;
		}
		break;
	default:
		PyErr_SetString(PyExc_SystemError, "Bad call flags in "
						"__Pyx_CyFunction_Call. METH_OLDARGS is no "
						"longer supported!");
		return NULL;
	}
	PyErr_Format(PyExc_TypeError, "%.200s() takes no keyword arguments",
				 f->m_ml->ml_name);
	return NULL;
}
#else
static PyObject * __Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
	return PyCFunction_Call(func, arg, kw);
}
#endif
static PyTypeObject __pyx_CyFunctionType_type = {
	PyVarObject_HEAD_INIT(0, 0)
	__Pyx_NAMESTR("cython_function_or_method"), /*tp_name*/
	sizeof(__pyx_CyFunctionObject),   /*tp_basicsize*/
	0,                                  /*tp_itemsize*/
	(destructor) __Pyx_CyFunction_dealloc, /*tp_dealloc*/
	0,                                  /*tp_print*/
	0,                                  /*tp_getattr*/
	0,                                  /*tp_setattr*/
#if PY_MAJOR_VERSION < 3
	0,                                  /*tp_compare*/
#else
	0,                                  /*reserved*/
#endif
	(reprfunc) __Pyx_CyFunction_repr,   /*tp_repr*/
	0,                                  /*tp_as_number*/
	0,                                  /*tp_as_sequence*/
	0,                                  /*tp_as_mapping*/
	0,                                  /*tp_hash*/
	__Pyx_CyFunction_Call,              /*tp_call*/
	0,                                  /*tp_str*/
	0,                                  /*tp_getattro*/
	0,                                  /*tp_setattro*/
	0,                                  /*tp_as_buffer*/
	Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC, /* tp_flags*/
	0,                                  /*tp_doc*/
	(traverseproc) __Pyx_CyFunction_traverse,   /*tp_traverse*/
	(inquiry) __Pyx_CyFunction_clear,   /*tp_clear*/
	0,                                  /*tp_richcompare*/
	offsetof(__pyx_CyFunctionObject, func_weakreflist), /* tp_weaklistoffse */
	0,                                  /*tp_iter*/
	0,                                  /*tp_iternext*/
	__pyx_CyFunction_methods,           /*tp_methods*/
	__pyx_CyFunction_members,           /*tp_members*/
	__pyx_CyFunction_getsets,           /*tp_getset*/
	0,                                  /*tp_base*/
	0,                                  /*tp_dict*/
	__Pyx_CyFunction_descr_get,         /*tp_descr_get*/
	0,                                  /*tp_descr_set*/
	offsetof(__pyx_CyFunctionObject, func_dict),/*tp_dictoffset*/
	0,                                  /*tp_init*/
	0,                                  /*tp_alloc*/
	0,                                  /*tp_new*/
	0,                                  /*tp_free*/
	0,                                  /*tp_is_gc*/
	0,                                  /*tp_bases*/
	0,                                  /*tp_mro*/
	0,                                  /*tp_cache*/
	0,                                  /*tp_subclasses*/
	0,                                  /*tp_weaklist*/
	0,                                  /*tp_del*/
#if PY_VERSION_HEX >= 0x02060000
	0,                                  /*tp_version_tag*/
#endif
};
static int __Pyx_CyFunction_init(void) {
#if !CYTHON_COMPILING_IN_PYPY
	__pyx_CyFunctionType_type.tp_call = PyCFunction_Call;
#endif
	if (PyType_Ready(&__pyx_CyFunctionType_type) < 0)
		return -1;
	__pyx_CyFunctionType = &__pyx_CyFunctionType_type;
	return 0;
}
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *func, size_t size, int pyobjects) {
	__pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
	m->defaults = PyMem_Malloc(size);
	if (!m->defaults)
		return PyErr_NoMemory();
	memset(m->defaults, 0, sizeof(size));
	m->defaults_pyobjects = pyobjects;
	return m->defaults;
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *func, PyObject *tuple) {
	__pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
	m->defaults_tuple = tuple;
	Py_INCREF(tuple);
}

static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
	return PyObject_RichCompareBool(s1, s2, equals);
#else
	if (s1 == s2) {
		return (equals == Py_EQ);
	} else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
		if (PyBytes_GET_SIZE(s1) != PyBytes_GET_SIZE(s2)) {
			return (equals == Py_NE);
		} else if (PyBytes_GET_SIZE(s1) == 1) {
			if (equals == Py_EQ)
				return (PyBytes_AS_STRING(s1)[0] == PyBytes_AS_STRING(s2)[0]);
			else
				return (PyBytes_AS_STRING(s1)[0] != PyBytes_AS_STRING(s2)[0]);
		} else {
			int result = memcmp(PyBytes_AS_STRING(s1), PyBytes_AS_STRING(s2), (size_t)PyBytes_GET_SIZE(s1));
			return (equals == Py_EQ) ? (result == 0) : (result != 0);
		}
	} else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
		return (equals == Py_NE);
	} else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
		return (equals == Py_NE);
	} else {
		int result;
		PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
		if (!py_result)
			return -1;
		result = __Pyx_PyObject_IsTrue(py_result);
		Py_DECREF(py_result);
		return result;
	}
#endif
}

static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
	return PyObject_RichCompareBool(s1, s2, equals);
#else
	if (s1 == s2) {
		return (equals == Py_EQ);
	} else if (PyUnicode_CheckExact(s1) & PyUnicode_CheckExact(s2)) {
		#if CYTHON_PEP393_ENABLED
		if ((PyUnicode_READY(s1) < 0) || (PyUnicode_READY(s2) < 0))
			return -1;
		if (PyUnicode_GET_LENGTH(s1) != PyUnicode_GET_LENGTH(s2)) {
			return (equals == Py_NE);
		} else if (PyUnicode_GET_LENGTH(s1) == 1) {
			Py_UCS4 ch1 = PyUnicode_READ_CHAR(s1, 0);
			Py_UCS4 ch2 = PyUnicode_READ_CHAR(s2, 0);
			return (equals == Py_EQ) ? (ch1 == ch2) : (ch1 != ch2);
		#else
		if (PyUnicode_GET_SIZE(s1) != PyUnicode_GET_SIZE(s2)) {
			return (equals == Py_NE);
		} else if (PyUnicode_GET_SIZE(s1) == 1) {
			Py_UNICODE ch1 = PyUnicode_AS_UNICODE(s1)[0];
			Py_UNICODE ch2 = PyUnicode_AS_UNICODE(s2)[0];
			return (equals == Py_EQ) ? (ch1 == ch2) : (ch1 != ch2);
		#endif
		} else {
			int result = PyUnicode_Compare(s1, s2);
			if ((result == -1) && unlikely(PyErr_Occurred()))
				return -1;
			return (equals == Py_EQ) ? (result == 0) : (result != 0);
		}
	} else if ((s1 == Py_None) & PyUnicode_CheckExact(s2)) {
		return (equals == Py_NE);
	} else if ((s2 == Py_None) & PyUnicode_CheckExact(s1)) {
		return (equals == Py_NE);
	} else {
		int result;
		PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
		if (!py_result)
			return -1;
		result = __Pyx_PyObject_IsTrue(py_result);
		Py_DECREF(py_result);
		return result;
	}
#endif
}

#if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION < 3
static PyObject *__Pyx_GetStdout(void) {
	PyObject *f = PySys_GetObject((char *)"stdout");
	if (!f) {
		PyErr_SetString(PyExc_RuntimeError, "lost sys.stdout");
	}
	return f;
}
static int __Pyx_Print(PyObject* f, PyObject *arg_tuple, int newline) {
	int i;
	if (!f) {
		if (!(f = __Pyx_GetStdout()))
			return -1;
	}
	Py_INCREF(f);
	for (i=0; i < PyTuple_GET_SIZE(arg_tuple); i++) {
		PyObject* v;
		if (PyFile_SoftSpace(f, 1)) {
			if (PyFile_WriteString(" ", f) < 0)
				goto error;
		}
		v = PyTuple_GET_ITEM(arg_tuple, i);
		if (PyFile_WriteObject(v, f, Py_PRINT_RAW) < 0)
			goto error;
		if (PyString_Check(v)) {
			char *s = PyString_AsString(v);
			Py_ssize_t len = PyString_Size(v);
			if (len > 0 &&
				isspace(Py_CHARMASK(s[len-1])) &&
				s[len-1] != ' ')
					PyFile_SoftSpace(f, 0);
		}
	}
	if (newline) {
		if (PyFile_WriteString("\n", f) < 0)
			goto error;
		PyFile_SoftSpace(f, 0);
	}
	Py_DECREF(f);
	return 0;
error:
	Py_DECREF(f);
	return -1;
}
#else /* Python 3 has a print function */
static int __Pyx_Print(PyObject* stream, PyObject *arg_tuple, int newline) {
	PyObject* kwargs = 0;
	PyObject* result = 0;
	PyObject* end_string;
	if (unlikely(!__pyx_print)) {
		__pyx_print = __Pyx_GetAttrString(__pyx_b, "print");
		if (!__pyx_print)
			return -1;
	}
	if (stream) {
		kwargs = PyDict_New();
		if (unlikely(!kwargs))
			return -1;
		if (unlikely(PyDict_SetItemString(kwargs, "file", stream) < 0))
			goto bad;
		if (!newline) {
			end_string = PyUnicode_FromStringAndSize(" ", 1);
			if (unlikely(!end_string))
				goto bad;
			if (PyDict_SetItemString(kwargs, "end", end_string) < 0) {
				Py_DECREF(end_string);
				goto bad;
			}
			Py_DECREF(end_string);
		}
	} else if (!newline) {
		if (unlikely(!__pyx_print_kwargs)) {
			__pyx_print_kwargs = PyDict_New();
			if (unlikely(!__pyx_print_kwargs))
				return -1;
			end_string = PyUnicode_FromStringAndSize(" ", 1);
			if (unlikely(!end_string))
				return -1;
			if (PyDict_SetItemString(__pyx_print_kwargs, "end", end_string) < 0) {
				Py_DECREF(end_string);
				return -1;
			}
			Py_DECREF(end_string);
		}
		kwargs = __pyx_print_kwargs;
	}
	result = PyObject_Call(__pyx_print, arg_tuple, kwargs);
	if (unlikely(kwargs) && (kwargs != __pyx_print_kwargs))
		Py_DECREF(kwargs);
	if (!result)
		return -1;
	Py_DECREF(result);
	return 0;
bad:
	if (kwargs != __pyx_print_kwargs)
		Py_XDECREF(kwargs);
	return -1;
}
#endif

#if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION < 3
static int __Pyx_PrintOne(PyObject* f, PyObject *o) {
	if (!f) {
		if (!(f = __Pyx_GetStdout()))
			return -1;
	}
	Py_INCREF(f);
	if (PyFile_SoftSpace(f, 0)) {
		if (PyFile_WriteString(" ", f) < 0)
			goto error;
	}
	if (PyFile_WriteObject(o, f, Py_PRINT_RAW) < 0)
		goto error;
	if (PyFile_WriteString("\n", f) < 0)
		goto error;
	Py_DECREF(f);
	return 0;
error:
	Py_DECREF(f);
	return -1;
	/* the line below is just to avoid C compiler
	 * warnings about unused functions */
	return __Pyx_Print(f, NULL, 0);
}
#else /* Python 3 has a print function */
static int __Pyx_PrintOne(PyObject* stream, PyObject *o) {
	int res;
	PyObject* arg_tuple = PyTuple_Pack(1, o);
	if (unlikely(!arg_tuple))
		return -1;
	res = __Pyx_Print(stream, arg_tuple, 1);
	Py_DECREF(arg_tuple);
	return res;
}
#endif

static CYTHON_INLINE unsigned char __Pyx_PyInt_AsUnsignedChar(PyObject* x) {
	const unsigned char neg_one = (unsigned char)-1, const_zero = 0;
	const int is_unsigned = neg_one > const_zero;
	if (sizeof(unsigned char) < sizeof(long)) {
		long val = __Pyx_PyInt_AsLong(x);
		if (unlikely(val != (long)(unsigned char)val)) {
			if (!unlikely(val == -1 && PyErr_Occurred())) {
				PyErr_SetString(PyExc_OverflowError,
					(is_unsigned && unlikely(val < 0)) ?
					"can't convert negative value to unsigned char" :
					"value too large to convert to unsigned char");
			}
			return (unsigned char)-1;
		}
		return (unsigned char)val;
	}
	return (unsigned char)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE unsigned short __Pyx_PyInt_AsUnsignedShort(PyObject* x) {
	const unsigned short neg_one = (unsigned short)-1, const_zero = 0;
	const int is_unsigned = neg_one > const_zero;
	if (sizeof(unsigned short) < sizeof(long)) {
		long val = __Pyx_PyInt_AsLong(x);
		if (unlikely(val != (long)(unsigned short)val)) {
			if (!unlikely(val == -1 && PyErr_Occurred())) {
				PyErr_SetString(PyExc_OverflowError,
					(is_unsigned && unlikely(val < 0)) ?
					"can't convert negative value to unsigned short" :
					"value too large to convert to unsigned short");
			}
			return (unsigned short)-1;
		}
		return (unsigned short)val;
	}
	return (unsigned short)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE unsigned int __Pyx_PyInt_AsUnsignedInt(PyObject* x) {
	const unsigned int neg_one = (unsigned int)-1, const_zero = 0;
	const int is_unsigned = neg_one > const_zero;
	if (sizeof(unsigned int) < sizeof(long)) {
		long val = __Pyx_PyInt_AsLong(x);
		if (unlikely(val != (long)(unsigned int)val)) {
			if (!unlikely(val == -1 && PyErr_Occurred())) {
				PyErr_SetString(PyExc_OverflowError,
					(is_unsigned && unlikely(val < 0)) ?
					"can't convert negative value to unsigned int" :
					"value too large to convert to unsigned int");
			}
			return (unsigned int)-1;
		}
		return (unsigned int)val;
	}
	return (unsigned int)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE char __Pyx_PyInt_AsChar(PyObject* x) {
	const char neg_one = (char)-1, const_zero = 0;
	const int is_unsigned = neg_one > const_zero;
	if (sizeof(char) < sizeof(long)) {
		long val = __Pyx_PyInt_AsLong(x);
		if (unlikely(val != (long)(char)val)) {
			if (!unlikely(val == -1 && PyErr_Occurred())) {
				PyErr_SetString(PyExc_OverflowError,
					(is_unsigned && unlikely(val < 0)) ?
					"can't convert negative value to char" :
					"value too large to convert to char");
			}
			return (char)-1;
		}
		return (char)val;
	}
	return (char)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE short __Pyx_PyInt_AsShort(PyObject* x) {
	const short neg_one = (short)-1, const_zero = 0;
	const int is_unsigned = neg_one > const_zero;
	if (sizeof(short) < sizeof(long)) {
		long val = __Pyx_PyInt_AsLong(x);
		if (unlikely(val != (long)(short)val)) {
			if (!unlikely(val == -1 && PyErr_Occurred())) {
				PyErr_SetString(PyExc_OverflowError,
					(is_unsigned && unlikely(val < 0)) ?
					"can't convert negative value to short" :
					"value too large to convert to short");
			}
			return (short)-1;
		}
		return (short)val;
	}
	return (short)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE int __Pyx_PyInt_AsInt(PyObject* x) {
	const int neg_one = (int)-1, const_zero = 0;
	const int is_unsigned = neg_one > const_zero;
	if (sizeof(int) < sizeof(long)) {
		long val = __Pyx_PyInt_AsLong(x);
		if (unlikely(val != (long)(int)val)) {
			if (!unlikely(val == -1 && PyErr_Occurred())) {
				PyErr_SetString(PyExc_OverflowError,
					(is_unsigned && unlikely(val < 0)) ?
					"can't convert negative value to int" :
					"value too large to convert to int");
			}
			return (int)-1;
		}
		return (int)val;
	}
	return (int)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE signed char __Pyx_PyInt_AsSignedChar(PyObject* x) {
	const signed char neg_one = (signed char)-1, const_zero = 0;
	const int is_unsigned = neg_one > const_zero;
	if (sizeof(signed char) < sizeof(long)) {
		long val = __Pyx_PyInt_AsLong(x);
		if (unlikely(val != (long)(signed char)val)) {
			if (!unlikely(val == -1 && PyErr_Occurred())) {
				PyErr_SetString(PyExc_OverflowError,
					(is_unsigned && unlikely(val < 0)) ?
					"can't convert negative value to signed char" :
					"value too large to convert to signed char");
			}
			return (signed char)-1;
		}
		return (signed char)val;
	}
	return (signed char)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE signed short __Pyx_PyInt_AsSignedShort(PyObject* x) {
	const signed short neg_one = (signed short)-1, const_zero = 0;
	const int is_unsigned = neg_one > const_zero;
	if (sizeof(signed short) < sizeof(long)) {
		long val = __Pyx_PyInt_AsLong(x);
		if (unlikely(val != (long)(signed short)val)) {
			if (!unlikely(val == -1 && PyErr_Occurred())) {
				PyErr_SetString(PyExc_OverflowError,
					(is_unsigned && unlikely(val < 0)) ?
					"can't convert negative value to signed short" :
					"value too large to convert to signed short");
			}
			return (signed short)-1;
		}
		return (signed short)val;
	}
	return (signed short)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE signed int __Pyx_PyInt_AsSignedInt(PyObject* x) {
	const signed int neg_one = (signed int)-1, const_zero = 0;
	const int is_unsigned = neg_one > const_zero;
	if (sizeof(signed int) < sizeof(long)) {
		long val = __Pyx_PyInt_AsLong(x);
		if (unlikely(val != (long)(signed int)val)) {
			if (!unlikely(val == -1 && PyErr_Occurred())) {
				PyErr_SetString(PyExc_OverflowError,
					(is_unsigned && unlikely(val < 0)) ?
					"can't convert negative value to signed int" :
					"value too large to convert to signed int");
			}
			return (signed int)-1;
		}
		return (signed int)val;
	}
	return (signed int)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE int __Pyx_PyInt_AsLongDouble(PyObject* x) {
	const int neg_one = (int)-1, const_zero = 0;
	const int is_unsigned = neg_one > const_zero;
	if (sizeof(int) < sizeof(long)) {
		long val = __Pyx_PyInt_AsLong(x);
		if (unlikely(val != (long)(int)val)) {
			if (!unlikely(val == -1 && PyErr_Occurred())) {
				PyErr_SetString(PyExc_OverflowError,
					(is_unsigned && unlikely(val < 0)) ?
					"can't convert negative value to int" :
					"value too large to convert to int");
			}
			return (int)-1;
		}
		return (int)val;
	}
	return (int)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE unsigned long __Pyx_PyInt_AsUnsignedLong(PyObject* x) {
	const unsigned long neg_one = (unsigned long)-1, const_zero = 0;
	const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
	if (likely(PyInt_Check(x))) {
		long val = PyInt_AS_LONG(x);
		if (is_unsigned && unlikely(val < 0)) {
			PyErr_SetString(PyExc_OverflowError,
							"can't convert negative value to unsigned long");
			return (unsigned long)-1;
		}
		return (unsigned long)val;
	} else
#endif
	if (likely(PyLong_Check(x))) {
		if (is_unsigned) {
			if (unlikely(Py_SIZE(x) < 0)) {
				PyErr_SetString(PyExc_OverflowError,
								"can't convert negative value to unsigned long");
				return (unsigned long)-1;
			}
			return (unsigned long)PyLong_AsUnsignedLong(x);
		} else {
			return (unsigned long)PyLong_AsLong(x);
		}
	} else {
		unsigned long val;
		PyObject *tmp = __Pyx_PyNumber_Int(x);
		if (!tmp) return (unsigned long)-1;
		val = __Pyx_PyInt_AsUnsignedLong(tmp);
		Py_DECREF(tmp);
		return val;
	}
}

static CYTHON_INLINE unsigned PY_LONG_LONG __Pyx_PyInt_AsUnsignedLongLong(PyObject* x) {
	const unsigned PY_LONG_LONG neg_one = (unsigned PY_LONG_LONG)-1, const_zero = 0;
	const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
	if (likely(PyInt_Check(x))) {
		long val = PyInt_AS_LONG(x);
		if (is_unsigned && unlikely(val < 0)) {
			PyErr_SetString(PyExc_OverflowError,
							"can't convert negative value to unsigned PY_LONG_LONG");
			return (unsigned PY_LONG_LONG)-1;
		}
		return (unsigned PY_LONG_LONG)val;
	} else
#endif
	if (likely(PyLong_Check(x))) {
		if (is_unsigned) {
			if (unlikely(Py_SIZE(x) < 0)) {
				PyErr_SetString(PyExc_OverflowError,
								"can't convert negative value to unsigned PY_LONG_LONG");
				return (unsigned PY_LONG_LONG)-1;
			}
			return (unsigned PY_LONG_LONG)PyLong_AsUnsignedLongLong(x);
		} else {
			return (unsigned PY_LONG_LONG)PyLong_AsLongLong(x);
		}
	} else {
		unsigned PY_LONG_LONG val;
		PyObject *tmp = __Pyx_PyNumber_Int(x);
		if (!tmp) return (unsigned PY_LONG_LONG)-1;
		val = __Pyx_PyInt_AsUnsignedLongLong(tmp);
		Py_DECREF(tmp);
		return val;
	}
}

static CYTHON_INLINE long __Pyx_PyInt_AsLong(PyObject* x) {
	const long neg_one = (long)-1, const_zero = 0;
	const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
	if (likely(PyInt_Check(x))) {
		long val = PyInt_AS_LONG(x);
		if (is_unsigned && unlikely(val < 0)) {
			PyErr_SetString(PyExc_OverflowError,
							"can't convert negative value to long");
			return (long)-1;
		}
		return (long)val;
	} else
#endif
	if (likely(PyLong_Check(x))) {
		if (is_unsigned) {
			if (unlikely(Py_SIZE(x) < 0)) {
				PyErr_SetString(PyExc_OverflowError,
								"can't convert negative value to long");
				return (long)-1;
			}
			return (long)PyLong_AsUnsignedLong(x);
		} else {
			return (long)PyLong_AsLong(x);
		}
	} else {
		long val;
		PyObject *tmp = __Pyx_PyNumber_Int(x);
		if (!tmp) return (long)-1;
		val = __Pyx_PyInt_AsLong(tmp);
		Py_DECREF(tmp);
		return val;
	}
}

static CYTHON_INLINE PY_LONG_LONG __Pyx_PyInt_AsLongLong(PyObject* x) {
	const PY_LONG_LONG neg_one = (PY_LONG_LONG)-1, const_zero = 0;
	const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
	if (likely(PyInt_Check(x))) {
		long val = PyInt_AS_LONG(x);
		if (is_unsigned && unlikely(val < 0)) {
			PyErr_SetString(PyExc_OverflowError,
							"can't convert negative value to PY_LONG_LONG");
			return (PY_LONG_LONG)-1;
		}
		return (PY_LONG_LONG)val;
	} else
#endif
	if (likely(PyLong_Check(x))) {
		if (is_unsigned) {
			if (unlikely(Py_SIZE(x) < 0)) {
				PyErr_SetString(PyExc_OverflowError,
								"can't convert negative value to PY_LONG_LONG");
				return (PY_LONG_LONG)-1;
			}
			return (PY_LONG_LONG)PyLong_AsUnsignedLongLong(x);
		} else {
			return (PY_LONG_LONG)PyLong_AsLongLong(x);
		}
	} else {
		PY_LONG_LONG val;
		PyObject *tmp = __Pyx_PyNumber_Int(x);
		if (!tmp) return (PY_LONG_LONG)-1;
		val = __Pyx_PyInt_AsLongLong(tmp);
		Py_DECREF(tmp);
		return val;
	}
}

static CYTHON_INLINE signed long __Pyx_PyInt_AsSignedLong(PyObject* x) {
	const signed long neg_one = (signed long)-1, const_zero = 0;
	const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
	if (likely(PyInt_Check(x))) {
		long val = PyInt_AS_LONG(x);
		if (is_unsigned && unlikely(val < 0)) {
			PyErr_SetString(PyExc_OverflowError,
							"can't convert negative value to signed long");
			return (signed long)-1;
		}
		return (signed long)val;
	} else
#endif
	if (likely(PyLong_Check(x))) {
		if (is_unsigned) {
			if (unlikely(Py_SIZE(x) < 0)) {
				PyErr_SetString(PyExc_OverflowError,
								"can't convert negative value to signed long");
				return (signed long)-1;
			}
			return (signed long)PyLong_AsUnsignedLong(x);
		} else {
			return (signed long)PyLong_AsLong(x);
		}
	} else {
		signed long val;
		PyObject *tmp = __Pyx_PyNumber_Int(x);
		if (!tmp) return (signed long)-1;
		val = __Pyx_PyInt_AsSignedLong(tmp);
		Py_DECREF(tmp);
		return val;
	}
}

static CYTHON_INLINE signed PY_LONG_LONG __Pyx_PyInt_AsSignedLongLong(PyObject* x) {
	const signed PY_LONG_LONG neg_one = (signed PY_LONG_LONG)-1, const_zero = 0;
	const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
	if (likely(PyInt_Check(x))) {
		long val = PyInt_AS_LONG(x);
		if (is_unsigned && unlikely(val < 0)) {
			PyErr_SetString(PyExc_OverflowError,
							"can't convert negative value to signed PY_LONG_LONG");
			return (signed PY_LONG_LONG)-1;
		}
		return (signed PY_LONG_LONG)val;
	} else
#endif
	if (likely(PyLong_Check(x))) {
		if (is_unsigned) {
			if (unlikely(Py_SIZE(x) < 0)) {
				PyErr_SetString(PyExc_OverflowError,
								"can't convert negative value to signed PY_LONG_LONG");
				return (signed PY_LONG_LONG)-1;
			}
			return (signed PY_LONG_LONG)PyLong_AsUnsignedLongLong(x);
		} else {
			return (signed PY_LONG_LONG)PyLong_AsLongLong(x);
		}
	} else {
		signed PY_LONG_LONG val;
		PyObject *tmp = __Pyx_PyNumber_Int(x);
		if (!tmp) return (signed PY_LONG_LONG)-1;
		val = __Pyx_PyInt_AsSignedLongLong(tmp);
		Py_DECREF(tmp);
		return val;
	}
}

static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
								  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename) {
	PyObject *old_exc, *old_val, *old_tb;
	PyObject *ctx;
	__Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
	#if PY_MAJOR_VERSION < 3
	ctx = PyString_FromString(name);
	#else
	ctx = PyUnicode_FromString(name);
	#endif
	__Pyx_ErrRestore(old_exc, old_val, old_tb);
	if (!ctx) {
		PyErr_WriteUnraisable(Py_None);
	} else {
		PyErr_WriteUnraisable(ctx);
		Py_DECREF(ctx);
	}
}

static int __Pyx_check_binary_version(void) {
	char ctversion[4], rtversion[4];
	PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
	PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
	if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
		char message[200];
		PyOS_snprintf(message, sizeof(message),
					  "compiletime version %s of module '%.100s' "
					  "does not match runtime version %s",
					  ctversion, __Pyx_MODULE_NAME, rtversion);
		#if PY_VERSION_HEX < 0x02050000
		return PyErr_Warn(NULL, message);
		#else
		return PyErr_WarnEx(NULL, message, 1);
		#endif
	}
	return 0;
}

static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
	int start = 0, mid = 0, end = count - 1;
	if (end >= 0 && code_line > entries[end].code_line) {
		return count;
	}
	while (start < end) {
		mid = (start + end) / 2;
		if (code_line < entries[mid].code_line) {
			end = mid;
		} else if (code_line > entries[mid].code_line) {
			 start = mid + 1;
		} else {
			return mid;
		}
	}
	if (code_line <= entries[mid].code_line) {
		return mid;
	} else {
		return mid + 1;
	}
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
	PyCodeObject* code_object;
	int pos;
	if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
		return NULL;
	}
	pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
	if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
		return NULL;
	}
	code_object = __pyx_code_cache.entries[pos].code_object;
	Py_INCREF(code_object);
	return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
	int pos, i;
	__Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
	if (unlikely(!code_line)) {
		return;
	}
	if (unlikely(!entries)) {
		entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
		if (likely(entries)) {
			__pyx_code_cache.entries = entries;
			__pyx_code_cache.max_count = 64;
			__pyx_code_cache.count = 1;
			entries[0].code_line = code_line;
			entries[0].code_object = code_object;
			Py_INCREF(code_object);
		}
		return;
	}
	pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
	if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
		PyCodeObject* tmp = entries[pos].code_object;
		entries[pos].code_object = code_object;
		Py_DECREF(tmp);
		return;
	}
	if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
		int new_max = __pyx_code_cache.max_count + 64;
		entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
			__pyx_code_cache.entries, new_max*sizeof(__Pyx_CodeObjectCacheEntry));
		if (unlikely(!entries)) {
			return;
		}
		__pyx_code_cache.entries = entries;
		__pyx_code_cache.max_count = new_max;
	}
	for (i=__pyx_code_cache.count; i>pos; i--) {
		entries[i] = entries[i-1];
	}
	entries[pos].code_line = code_line;
	entries[pos].code_object = code_object;
	__pyx_code_cache.count++;
	Py_INCREF(code_object);
}

static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
			const char *funcname, int c_line,
			int py_line, const char *filename) {
	PyCodeObject *py_code = 0;
	PyObject *py_srcfile = 0;
	PyObject *py_funcname = 0;
	#if PY_MAJOR_VERSION < 3
	py_srcfile = PyString_FromString(filename);
	#else
	py_srcfile = PyUnicode_FromString(filename);
	#endif
	if (!py_srcfile) goto bad;
	if (c_line) {
		#if PY_MAJOR_VERSION < 3
		py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
		#else
		py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
		#endif
	}
	else {
		#if PY_MAJOR_VERSION < 3
		py_funcname = PyString_FromString(funcname);
		#else
		py_funcname = PyUnicode_FromString(funcname);
		#endif
	}
	if (!py_funcname) goto bad;
	py_code = __Pyx_PyCode_New(
		0,            /*int argcount,*/
		0,            /*int kwonlyargcount,*/
		0,            /*int nlocals,*/
		0,            /*int stacksize,*/
		0,            /*int flags,*/
		__pyx_empty_bytes, /*PyObject *code,*/
		__pyx_empty_tuple, /*PyObject *consts,*/
		__pyx_empty_tuple, /*PyObject *names,*/
		__pyx_empty_tuple, /*PyObject *varnames,*/
		__pyx_empty_tuple, /*PyObject *freevars,*/
		__pyx_empty_tuple, /*PyObject *cellvars,*/
		py_srcfile,   /*PyObject *filename,*/
		py_funcname,  /*PyObject *name,*/
		py_line,      /*int firstlineno,*/
		__pyx_empty_bytes  /*PyObject *lnotab*/
	);
	Py_DECREF(py_srcfile);
	Py_DECREF(py_funcname);
	return py_code;
bad:
	Py_XDECREF(py_srcfile);
	Py_XDECREF(py_funcname);
	return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
							   int py_line, const char *filename) {
	PyCodeObject *py_code = 0;
	PyObject *py_globals = 0;
	PyFrameObject *py_frame = 0;
	py_code = __pyx_find_code_object(c_line ? c_line : py_line);
	if (!py_code) {
		py_code = __Pyx_CreateCodeObjectForTraceback(
			funcname, c_line, py_line, filename);
		if (!py_code) goto bad;
		__pyx_insert_code_object(c_line ? c_line : py_line, py_code);
	}
	py_globals = PyModule_GetDict(__pyx_m);
	if (!py_globals) goto bad;
	py_frame = PyFrame_New(
		PyThreadState_GET(), /*PyThreadState *tstate,*/
		py_code,             /*PyCodeObject *code,*/
		py_globals,          /*PyObject *globals,*/
		0                    /*PyObject *locals*/
	);
	if (!py_frame) goto bad;
	py_frame->f_lineno = py_line;
	PyTraceBack_Here(py_frame);
bad:
	Py_XDECREF(py_code);
	Py_XDECREF(py_frame);
}

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
	while (t->p) {
		#if PY_MAJOR_VERSION < 3
		if (t->is_unicode) {
			*t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
		} else if (t->intern) {
			*t->p = PyString_InternFromString(t->s);
		} else {
			*t->p = PyString_FromStringAndSize(t->s, t->n - 1);
		}
		#else  /* Python 3+ has unicode identifiers */
		if (t->is_unicode | t->is_str) {
			if (t->intern) {
				*t->p = PyUnicode_InternFromString(t->s);
			} else if (t->encoding) {
				*t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
			} else {
				*t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
			}
		} else {
			*t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
		}
		#endif
		if (!*t->p)
			return -1;
		++t;
	}
	return 0;
}


/* Type Conversion Functions */

static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}

static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x) {
  PyNumberMethods *m;
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
	return Py_INCREF(x), x;
  m = Py_TYPE(x)->tp_as_number;
#if PY_VERSION_HEX < 0x03000000
  if (m && m->nb_int) {
	name = "int";
	res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
	name = "long";
	res = PyNumber_Long(x);
  }
#else
  if (m && m->nb_int) {
	name = "int";
	res = PyNumber_Long(x);
  }
#endif
  if (res) {
#if PY_VERSION_HEX < 0x03000000
	if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
	if (!PyLong_Check(res)) {
#endif
	  PyErr_Format(PyExc_TypeError,
				   "__%s__ returned non-%s (type %.200s)",
				   name, name, Py_TYPE(res)->tp_name);
	  Py_DECREF(res);
	  return NULL;
	}
  }
  else if (!PyErr_Occurred()) {
	PyErr_SetString(PyExc_TypeError,
					"an integer is required");
  }
  return res;
}

static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject* x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}

static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
#if PY_VERSION_HEX < 0x02050000
   if (ival <= LONG_MAX)
	   return PyInt_FromLong((long)ival);
   else {
	   unsigned char *bytes = (unsigned char *) &ival;
	   int one = 1; int little = (int)*(unsigned char*)&one;
	   return _PyLong_FromByteArray(bytes, sizeof(size_t), little, 0);
   }
#else
   return PyInt_FromSize_t(ival);
#endif
}

static CYTHON_INLINE size_t __Pyx_PyInt_AsSize_t(PyObject* x) {
   unsigned PY_LONG_LONG val = __Pyx_PyInt_AsUnsignedLongLong(x);
   if (unlikely(val == (unsigned PY_LONG_LONG)-1 && PyErr_Occurred())) {
	   return (size_t)-1;
   } else if (unlikely(val != (unsigned PY_LONG_LONG)(size_t)val)) {
	   PyErr_SetString(PyExc_OverflowError,
					   "value too large to convert to size_t");
	   return (size_t)-1;
   }
   return (size_t)val;
}


#endif /* Py_PYTHON_H */
